active: true
derived: false
header: |
  Transformer class diagram
level: 5
links:
- ARC-001: y3hraERh10v0ZeagXw10yVa2irVB_Wq1bOHAkBVKLUM=
- ARC-002: Ui5Z6JsqJkwmNktqyF6bqwgovVGHvHZbHdsvs4Hlrjs=
- ARC-003: R0GD-wyqQaUFXEDlm6ChoGsrdZGrFgK3Vhcompn3I5g=
- ARC-004: YQ8rkbIXe2QD1DWLdeWsLSHiG8a-BZ0uA6j3ggLhWVA=
normative: true
ref: ''
reviewed: rqhZKrPpFnnGQEEZxW9CcQRE82pXl91-jpx1sV0EuT4=
text: |
  ## Design ideas

  In the ETL stack, the transformation process is arguably the most complex one. For every STIX Object, we need to define
  how to translate it to the defined TypeDB object. A partial class diagram of the Transformer is given below, but note that only the most important functions are listed and sometimes, function signatures are left out in case they can be determined by inheritance. The complete diagram can be found further below.

  ![Transformer class diagram](assets/2C0A2E_DIA_Transformer-ClassDiagram.drawio.png "Transformer class diagram"){: width="100%"}

  The idea of the transformer for STIX 2.1 to TypeDB is that it transforms each STIX object in sequence. Thanks to our TypeDB schema being very close to STIX 2.1, this process is simplified. It also allows for concurrency in case a sequential implementation is too slow. For this, the Transformer instantiates a `STIXObjectConverter` subclass (for each STIX object) that knows how to transform the underlying STIX Object. This class holds the main functionality of the Transformer. We distinguish between SDOs, SROs, SCOs, SMOs, and Custom Objects, primarily because SROs will create relations while SDOs and SCOs create entities and SMOs may rely on individual conversion techniques. Currently, only STIX Core Objects are implemented. They have a common Converter superclass `STIXCoreObjectConverter`.

  When the `convert_to_typeql` method is called, this converter will

  1. determine the TypeDB object type and initialize the entity/ relation
  2. convert the main properties
  3. convert the properties of the extension if one exists

  For step (1), the Converter will determine the TypeDB object type using the `STIXtoTypeDBMapper` and will then initialize the TypeDB object that represents the STIX object. The method that is used here is defined for each subclass of the `STIXCoreObjectConverter` as the object depends on the STIX category. So for SDOs and SCOs, entities are created, and for SROs, relations are created. Here, the Converter makes use of the `Entity` and `Relation` data classes from the `typedb` package.
  For (2), the Converter iterates over the STIX properties and determines with the help of the `STIXtoTypeDBMapper` how to transform each attribute, i.e. which name and which value type to use for the TypeDB attribute. For the conversion of the values, the `ValueConverter` is used. For each value type, a dedicated subclass is defined. These subclasses then know how to interpret and convert the value from STIX 2.1 JSON to the TypeDB implementation.
  The third step (3) works similar to the property conversion (2) as the extension has already been considered in step (1) for the object type, so again, only properties have to be converted.

  The most challenging part is the building and execution order of the insert queries. The data class `InsertQuery`, that stores the match and insert statements as entities or relations, is not enough here. A mechanism is needed to determine which parts of the query can be executed at which time. Embedded relations, for example, match on a different object by an id. However, it is possible that this referenced object has not yet been inserted into the database. Therefore, some statements have to wait. Also SROs can only be safely inserted once every other STIX Object has been inserted. Therefore, a class called `QueryBundle` is used that distinguishes between the main STIX Object, entities and relations that represent more complex attributes, such as an `external-reference`, and embedded relations.
  The order is as follows: First, all STIX Objects that are translated as entities have to be inserted (e.g. SDOs), then all STIX objects that are relations (these are SROs) can be inserted and at last, the embedded relations may be inserted (because embedded relations can also reference SROs). The entities and relations that represent attributes have to be inserted after, but in the same query as the main STIX Object, because these entities do not have ids and can therefore not be uniquely matched later on.

  After the transformation process finished, insert query objects are returned instead of insert query strings. The objects can be turned to strings with a single function call to the `TypeQLBuilder`, using the `build_insert_query` function. But this step is done in the loader to keep some flexibility here. For more explanations to this topic, please see the *loading* chapter.

  ## Mapping

  There are many STIX Objects and much more properties defined on them, as well as extensions. Therefore, it needs to be stored somewhere how to transform each STIX object, e.g. which attribute names to choose for the STIX properties. These information are stored in separate mapping files in the JSON format. The `STIXtoTypeDBMapper` class handles these files. Other classes can then call its functions to get these information, e.g. they can ask for the attribute name of a STIX property of a certain STIX object type. For more information, please see the *Mapping* chapter in the *implementation* part.

  ## Class diagram explainer

  STIXObjectConverter
  : The STIXObjectConverter converts a whole STIX Object to the necessary TypeQL insertion queries. During this process, it uses other components such as the `ValueConverter` for converting its attributes. Each subclass takes care of the conversion of a complete STIX Object class.

  ValueConverter
  : The ValueConverter is responsible for converting a single value from STIX 2.1 to TypeDB. Because some values translate to more complex structures, such as relations, not only values are returned, but whole insertion queries, too. The subclasses represent a value type each. The `StringConverter` for example converts values in JSON String format to TypeDB string values, while the `CompositeValueConverter` takes care of values that are structured, i.e. consist of several values, such as external references.

  ValueConverterAdapter
  : As the return types of the ValueConverters' `convert_to_typeql` differ, the ValueConverterAdapter is responsible for creating a tuple of values and QueryBundles for each ValueConverter such that the STIXObjectConverter does not need to take care of type matching.

  STIXtoTypeDBMapper
  : The STIXtoTypeDBMapper takes care of accessing the mapping that defines for each object, attribute, relation and composite type how it should be transformed, i.e. which names and values are used in the corresponding TypeDB element.

  QueryBundle
  : The QueryBundle collects insert queries that are created by the ValueConverters needed to insert the transformed values. In contrast to simple lists, the QueryBundle takes care of sorting the insert queries correctly such that insert queries are inserted in the correct order. This is for example important for inserting embedded relations after the referenced object has been inserted.

  Identification
  : Some ValueConverters need to know the TypeDB object type of the main object or their id. For this, the `Identification` class is used. This class contains all the data needed to create different references to the main object.
