window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "satrap", "modulename": "satrap", "kind": "module", "doc": "<p>SATRAP V0.1 (Alpha)\nSemi-Automated Threat Reconnaissance and Analysis Platform </p>\n\n<p>Open-source, cross-platform software aimed at supporting computer-aided analysis of cyber threat intelligence (CTI) leveraging automated reasoning.</p>\n"}, {"fullname": "satrap.commons", "modulename": "satrap.commons", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.commons.exceptions", "modulename": "satrap.commons.exceptions", "kind": "module", "doc": "<p>Common exceptions, classes, and functions for SATRAP</p>\n"}, {"fullname": "satrap.commons.exceptions.SatrapError", "modulename": "satrap.commons.exceptions", "qualname": "SatrapError", "kind": "class", "doc": "<p>Generic SATRAP error.</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.commons.exceptions.SatrapError.__init__", "modulename": "satrap.commons.exceptions", "qualname": "SatrapError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">commons</span><span class=\"o\">.</span><span class=\"n\">log_utils</span> <span class=\"p\">(</span><span class=\"n\">INFO</span><span class=\"p\">)</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "satrap.commons.exceptions.SatrapWarning", "modulename": "satrap.commons.exceptions", "qualname": "SatrapWarning", "kind": "class", "doc": "<p>Generic SATRAP warning.</p>\n", "bases": "SatrapError, builtins.Warning"}, {"fullname": "satrap.commons.exceptions.SatrapWarning.__init__", "modulename": "satrap.commons.exceptions", "qualname": "SatrapWarning.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">commons</span><span class=\"o\">.</span><span class=\"n\">log_utils</span> <span class=\"p\">(</span><span class=\"n\">INFO</span><span class=\"p\">)</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "satrap.commons.exceptions.SatrapInfo", "modulename": "satrap.commons.exceptions", "qualname": "SatrapInfo", "kind": "class", "doc": "<p>Generic SATRAP info.</p>\n", "bases": "SatrapWarning"}, {"fullname": "satrap.commons.exceptions.SatrapInfo.__init__", "modulename": "satrap.commons.exceptions", "qualname": "SatrapInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">commons</span><span class=\"o\">.</span><span class=\"n\">log_utils</span> <span class=\"p\">(</span><span class=\"n\">INFO</span><span class=\"p\">)</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "satrap.commons.file_utils", "modulename": "satrap.commons.file_utils", "kind": "module", "doc": "<p>Common exceptions, classes, and functions for file handling.</p>\n"}, {"fullname": "satrap.commons.file_utils.get_filename_from_url", "modulename": "satrap.commons.file_utils", "qualname": "get_filename_from_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.create_local_filename", "modulename": "satrap.commons.file_utils", "qualname": "create_local_filename", "kind": "function", "doc": "<p>The URL points to a JSON file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.validate_file_access", "modulename": "satrap.commons.file_utils", "qualname": "validate_file_access", "kind": "function", "doc": "<p>Validates whether a file can be accessed with the selected options.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  The path to the file</li>\n<li><strong>write</strong>:  True to write to the file</li>\n<li><strong>override</strong>:  True to override the contents of the file</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the file cannot be accessed with the selected options</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">write</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">override</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.download_file", "modulename": "satrap.commons.file_utils", "qualname": "download_file", "kind": "function", "doc": "<p>Downloads and saves a single file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  url of the source file</li>\n<li><strong>save_to</strong>:  the file where the source file should be saved to</li>\n<li><strong>override</strong>:  whether the target file should be overridden if \nit already exists</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>requests.exceptions.Timeout</strong>:  if the connection to the server takes\nlonger than 20 sec. or the reading takes longer than 30 sec.</li>\n<li><strong>HTTPError</strong>:  if the response status code is not 200</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">save_to</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">override</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.read_json", "modulename": "satrap.commons.file_utils", "qualname": "read_json", "kind": "function", "doc": "<p>Read and return the content of a .json file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  the file path of the json data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.write_json", "modulename": "satrap.commons.file_utils", "qualname": "write_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.file_utils.create_file_and_write", "modulename": "satrap.commons.file_utils", "qualname": "create_file_and_write", "kind": "function", "doc": "<p>Create a file with a given name and writes a given text in it</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  the path/name of the file</li>\n<li><strong>text</strong>:  the text to be written in the file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.log_utils", "modulename": "satrap.commons.log_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.commons.log_utils.LOG_NEWLINE", "modulename": "satrap.commons.log_utils", "qualname": "LOG_NEWLINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n   &#x27;"}, {"fullname": "satrap.commons.log_utils.logger", "modulename": "satrap.commons.log_utils", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger satrap.commons.log_utils (INFO)&gt;"}, {"fullname": "satrap.commons.log_utils.DEFAULT_LOGGING_FORMAT", "modulename": "satrap.commons.log_utils", "qualname": "DEFAULT_LOGGING_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[%(levelname)s] (%(asctime)s) %(filename)s at %(funcName)s():\\n   %(message)s&#x27;"}, {"fullname": "satrap.commons.log_utils.WARNING_LOGGING_FORMAT", "modulename": "satrap.commons.log_utils", "qualname": "WARNING_LOGGING_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;[%(levelname)s] (%(asctime)s) %(message)s&#x27;"}, {"fullname": "satrap.commons.log_utils.SHORT_DATE_FORMAT", "modulename": "satrap.commons.log_utils", "qualname": "SHORT_DATE_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%d-%m-%y %H:%M&#x27;"}, {"fullname": "satrap.commons.log_utils.current_date", "modulename": "satrap.commons.log_utils", "qualname": "current_date", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;2025-04-22&#x27;"}, {"fullname": "satrap.commons.log_utils.DATED_LOGS_FOLDER", "modulename": "satrap.commons.log_utils", "qualname": "DATED_LOGS_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs/2025-04-22&#x27;"}, {"fullname": "satrap.commons.log_utils.ERROR_LOG_FILE", "modulename": "satrap.commons.log_utils", "qualname": "ERROR_LOG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs/2025-04-22/error.log&#x27;"}, {"fullname": "satrap.commons.log_utils.DEBUG_LOG_FILE", "modulename": "satrap.commons.log_utils", "qualname": "DEBUG_LOG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs/2025-04-22/debug.log&#x27;"}, {"fullname": "satrap.commons.log_utils.INFO_LOG_FILE", "modulename": "satrap.commons.log_utils", "qualname": "INFO_LOG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs/2025-04-22/info.log&#x27;"}, {"fullname": "satrap.commons.log_utils.formatter", "modulename": "satrap.commons.log_utils", "qualname": "formatter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;logging.Formatter object&gt;"}, {"fullname": "satrap.commons.log_utils.short_date_formatter", "modulename": "satrap.commons.log_utils", "qualname": "short_date_formatter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;logging.Formatter object&gt;"}, {"fullname": "satrap.commons.log_utils.warning_formatter", "modulename": "satrap.commons.log_utils", "qualname": "warning_formatter", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;logging.Formatter object&gt;"}, {"fullname": "satrap.commons.log_utils.log_console_handler", "modulename": "satrap.commons.log_utils", "qualname": "log_console_handler", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamHandler (ERROR)&gt;"}, {"fullname": "satrap.commons.log_utils.TESTING_LEVEL", "modulename": "satrap.commons.log_utils", "qualname": "TESTING_LEVEL", "kind": "variable", "doc": "<p></p>\n", "default_value": "25"}, {"fullname": "satrap.commons.log_utils.testing", "modulename": "satrap.commons.log_utils", "qualname": "testing", "kind": "function", "doc": "<p>Log the provided message if the logger is enabled for the 'TESTING_LEVEL' severity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  The instance of the logger.</li>\n<li><strong>message</strong>:  The message to be logged.</li>\n<li><strong>args</strong>:  Additional positional arguments to be passed to the logger.</li>\n<li><strong>kws</strong>:  Additional keyword arguments to be passed to the logger.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kws</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.commons.log_utils.log_testing_handler", "modulename": "satrap.commons.log_utils", "qualname": "log_testing_handler", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamHandler (TESTING)&gt;"}, {"fullname": "satrap.commons.log_utils.ACTIVE_LOG_FILE", "modulename": "satrap.commons.log_utils", "qualname": "ACTIVE_LOG_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs/2025-04-22/info.log&#x27;"}, {"fullname": "satrap.datamanagement", "modulename": "satrap.datamanagement", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb", "modulename": "satrap.datamanagement.typedb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.dataobjects", "modulename": "satrap.datamanagement.typedb.dataobjects", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.VariableDealer", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "VariableDealer", "kind": "class", "doc": "<p>Responsible for giving unique variable names.</p>\n\n<p>This version does not support concurrency.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.VariableDealer.counter", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "VariableDealer.counter", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.VariableDealer.get_variable", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "VariableDealer.get_variable", "kind": "function", "doc": "<p>Returns an unused variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the variable</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.VariableDealer.reset", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "VariableDealer.reset", "kind": "function", "doc": "<p>Resets the used variables.</p>\n\n<p>After this method call, variables can be returned that \nhave been used before.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing", "kind": "class", "doc": "<p>Represents a Thing object in TypeDB, i.e. entity or relation.</p>\n\n<p>Note: The Thing object will be deprecated in TypeDB 3.0.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.__init__", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.__init__", "kind": "function", "doc": "<p>Instantiate a thing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variable</strong>:  The name of the variable assigned to this \nthing, defaults to an unused variable</li>\n<li><strong>typedb_type</strong>:  The type in typedb of this thing, \ndefaults to \"thing\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">typedb_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;thing&#39;</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.variable", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.variable", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.type", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.attributes", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.attributes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, list[str]]"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.add_attribute", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.add_attribute", "kind": "function", "doc": "<p>Add an attribute to the thing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the attribute</li>\n<li><strong>value</strong>:  The value of the attribute</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.get_attributes", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.get_attributes", "kind": "function", "doc": "<p>Returns the names of the attributes and the values that are\nassigned to them.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The names and values assigned to them</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.set_type", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.set_type", "kind": "function", "doc": "<p>Set the type of the thing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>object_type</strong>:  The type of this thing</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">object_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.get_type", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.get_type", "kind": "function", "doc": "<p>Returns the type of the Thing.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The type of this thing</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Thing.get_variable", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Thing.get_variable", "kind": "function", "doc": "<p>Returns the variable of the thing in the insert query.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The variable assigned to this Thing</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Entity", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Entity", "kind": "class", "doc": "<p>Represents an Entity object in TypeDB.</p>\n", "bases": "Thing"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Entity.__init__", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Entity.__init__", "kind": "function", "doc": "<p>Instantiate an entity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variable</strong>:  The name of the variable assigned to this \nentity, defaults to an unused variable</li>\n<li><strong>typedb_type</strong>:  The type in typedb of this entity, \ndefaults to \"entity\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">typedb_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;entity&#39;</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Relation", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Relation", "kind": "class", "doc": "<p>Represents a Relation object in TypeDB.</p>\n", "bases": "Thing"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Relation.__init__", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Relation.__init__", "kind": "function", "doc": "<p>Instantiate a relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variable</strong>:  The name of the variable assigned to this \nrelation, defaults to an unused variable</li>\n<li><strong>typedb_type</strong>:  The type in typedb of this relation, \ndefaults to \"relation\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">typedb_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;relation&#39;</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Relation.plays_roles", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Relation.plays_roles", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, list[str]]"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Relation.add_roleplayer", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Relation.add_roleplayer", "kind": "function", "doc": "<p>Add a role to the relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>role</strong>:  The name of the role</li>\n<li><strong>variable</strong>:  The variable of the entity that plays the role</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">role</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.Relation.get_roles", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "Relation.get_roles", "kind": "function", "doc": "<p>Returns the names and variables of the roles.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The names and variables of the roles</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery", "kind": "class", "doc": "<p>Structure containing a set of TypeDb types/Things (entity, relation, attribute) that can be \nmapped to an Insert query in TypeQL.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.__init__", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.__init__", "kind": "function", "doc": "<p>Empty Insert query structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.match_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.match_clause", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[satrap.datamanagement.typedb.dataobjects.Thing]"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.insert_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.insert_clause", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[satrap.datamanagement.typedb.dataobjects.Thing]"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.add_to_match_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.add_to_match_clause", "kind": "function", "doc": "<p>Add an instance of a type (or object) to the match clause.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance</strong>:  The instance to add</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.add_to_insert_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.add_to_insert_clause", "kind": "function", "doc": "<p>Add a thing to the insert clause.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>insert</strong>:  The thing to add</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">insert</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.get_match_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.get_match_clause", "kind": "function", "doc": "<p>Returns the things in the match clause.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The things in the match clause</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.get_insert_clause", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.get_insert_clause", "kind": "function", "doc": "<p>Returns the Things in the insert clause.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The things in the insert clause</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.is_empty", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.is_empty", "kind": "function", "doc": "<p>States whether this InsertQuery is empty, i.e. whether there\nis no insertion.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Whether there is no insertion</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.dataobjects.InsertQuery.extend", "modulename": "satrap.datamanagement.typedb.dataobjects", "qualname": "InsertQuery.extend", "kind": "function", "doc": "<p>Combines this InsertQuery with a given one by clauses</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>insert_query</strong>:  The other InsertQuery</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">insert_query</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.inserthandler", "modulename": "satrap.datamanagement.typedb.inserthandler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler", "kind": "class", "doc": "<p>Executes TypeDB insert queries on a TypeDB database instance.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.__init__", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_address</span>, </span><span class=\"param\"><span class=\"n\">database_name</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.server_address", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.server_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.database_name", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.database_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.driver", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.insert", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.insert", "kind": "function", "doc": "<p>Inserts a set of queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>queries</strong>:  The queries that should be inserted</li>\n<li><strong>database_name</strong>:  The name of the database where the queries \nshould be inserted to</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the set was successfully inserted, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">queries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.inserthandler.TypeDBBatchInsertHandler.manage_transactions", "modulename": "satrap.datamanagement.typedb.inserthandler", "qualname": "TypeDBBatchInsertHandler.manage_transactions", "kind": "function", "doc": "<p>Split the queries to transactions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  A Data session on the database on which the \nqueries should be executed.</li>\n<li><strong>queries</strong>:  The queries that should be inserted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if all queries were successfully inserted, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">session</span>, </span><span class=\"param\"><span class=\"n\">queries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants", "modulename": "satrap.datamanagement.typedb.typedb_constants", "kind": "module", "doc": "<p>Constants related to TypeDB.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ENTITY", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ENTITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;entity&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.RELATION", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "RELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.THING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "THING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;thing&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.MATCH_KEYWORD", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "MATCH_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;match&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.INSERT_KEYWORD", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "INSERT_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;insert&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.KEYWORD_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "KEYWORD_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.OBJECT_ENDING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "OBJECT_ENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;;&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.OBJECT_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "OBJECT_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ATTRIBUTE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ATTRIBUTE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;, &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ATTRIBUTE_KEYWORD", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ATTRIBUTE_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;has&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ATTRIBUTE_KEYWORD_KEY_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ATTRIBUTE_KEYWORD_KEY_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ATTRIBUTE_KEY_VALUE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ATTRIBUTE_KEY_VALUE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ROLE_VARIABLE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ROLE_VARIABLE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;: &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.VARIABLE_PREFIX", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "VARIABLE_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;$&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.BEFORE_TYPEKEYWORD_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "BEFORE_TYPEKEYWORD_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.TYPE_KEYWORD", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "TYPE_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;isa&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.TYPEKEYWORD_TYPE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "TYPEKEYWORD_TYPE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ROLE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ROLE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;, &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ROLES_BEGINNING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ROLES_BEGINNING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;(&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ROLES_ENDING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ROLES_ENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;)&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.VARIABLE_RELATION_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "VARIABLE_RELATION_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.BOOLEAN", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "BOOLEAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;boolean&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;datetime&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DOUBLE", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DOUBLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;double&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.LONG", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "LONG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;long&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.STRING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;string&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.BOOLEAN_TRUE", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "BOOLEAN_TRUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;true&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.BOOLEAN_FALSE", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "BOOLEAN_FALSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;false&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME_DATE_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME_DATE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;-&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME_DATE_TIME_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME_DATE_TIME_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;T&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME_TIME_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME_TIME_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;:&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME_MILLIS_SEPARATOR", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME_MILLIS_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.DATETIME_NUMBER_MILLIS", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "DATETIME_NUMBER_MILLIS", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.STRING_DELIMITER", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "STRING_DELIMITER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&quot;&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ALT_STRING_DELIMITER", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ALT_STRING_DELIMITER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;&#x27;&quot;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.ENTITY_MARKING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "ENTITY_MARKING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;entity&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.RELATION_MARKING", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "RELATION_MARKING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.NON_EMPTY_SERVER", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "NON_EMPTY_SERVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The server address must not be &#x27;None&#x27; or empty.&quot;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.NON_EMPTY_DB", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "NON_EMPTY_DB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The database name must not be &#x27;None&#x27; or empty.&quot;"}, {"fullname": "satrap.datamanagement.typedb.typedb_constants.to_typedb_string", "modulename": "satrap.datamanagement.typedb.typedb_constants", "qualname": "to_typedb_string", "kind": "function", "doc": "<p>Returns the TypeDB string representation of a string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The string to be converted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeDB representation of the given string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler", "modulename": "satrap.datamanagement.typedb.typedbhandler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation", "kind": "class", "doc": "<p>A class to represent an inference explanation.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>statement : str, optional\n    Statement in the query subject to explanation, as matching data is derived from \n    the application of an inference rule (default is None)\nrule : str, optional\n    The inference rule that is applied (default is None)\ncondition : str, optional\n    The assignment of variables that meets the rule's condition (default is None)\nconclusion : str, optional\n    The conclusion resulting from the application of the rule (default is None)\nvar_mapping : dict, optional\n    The mapping of variables in the query statement to the rule variables \n    (query var: rule var) (default is None)</p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.__init__", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">statement</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rule</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">condition</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conclusion</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var_mapping</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.statement", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.statement", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.rule", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.rule", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.condition", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.condition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.conclusion", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.conclusion", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": "None"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.var_mapping", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.var_mapping", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict[str, str]]", "default_value": "None"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.STATEMENT_DESC", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.STATEMENT_DESC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Data inferred for query statement&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.RULE_DESC", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.RULE_DESC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Applied rule&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.CONDITION_DESC", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.CONDITION_DESC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Condition met&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.CONCLUSION_DESC", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.CONCLUSION_DESC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Inferred conclusion&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.MAPPING_DESC", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.MAPPING_DESC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Mapping of variables (query var: rule var)&#x27;"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.InferenceExplanation.as_json", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "InferenceExplanation.as_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler", "kind": "class", "doc": "<p>TypeDBHandler is a class that provides methods to interact with a TypeDB database.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.__init__", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_address</span>, </span><span class=\"param\"><span class=\"n\">database_name</span></span>)</span>"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.server_address", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.server_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.database_name", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.database_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.session", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.session", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.get_attributes_of", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.get_attributes_of", "kind": "function", "doc": "<p>Retrieves the attributes of a given entity and returns them as a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity</strong>:  The entity whose attributes are to be retrieved.</li>\n</ul>\n\n<p>:returns: A dictionary where the keys are attribute labels and the values are\n    the values of the attributes as strings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">concept</span><span class=\"o\">.</span><span class=\"n\">thing</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.get_attribute_value", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.get_attribute_value", "kind": "function", "doc": "<p>Retrieves the values of a specified attribute from the results of a given query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The query string to be executed.</li>\n<li><strong>attribute</strong>:  The attribute whose values are to be retrieved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of values for the specified attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.aggregate_int_query", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.aggregate_int_query", "kind": "function", "doc": "<p>Run an aggregate query on a TypeDB database whose return\nis expected to be an integer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server.</li>\n<li><strong>db_name</strong>:  The name of the database.</li>\n<li><strong>query</strong>:  The aggregate query to be executed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the aggregate query as an integer.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.aggregate_group_query", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.aggregate_group_query", "kind": "function", "doc": "<p>Executes a group aggregate query on the TypeDB database and returns the results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The TypeQL query string to be executed.</li>\n<li><strong>inference</strong>:  True to enable inference during the query execution, defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary where the keys are the grouped concepts' labels and the values\n      are the corresponding counts.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">inference</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.fetch_query", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.fetch_query", "kind": "function", "doc": "<p>Run a fetch query on a TypeDB database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n<li><strong>query</strong>:  The fetch query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the fetch query as a list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">inference</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.get_query", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.get_query", "kind": "function", "doc": "<p>Run a get query on a TypeDB database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n<li><strong>query</strong>:  The fetch query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the fetch query as a list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">inference</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.explain_get_query", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.explain_get_query", "kind": "function", "doc": "<p>Provides a collection of explanations of inferred relations for a given TypeDB query.</p>\n\n<p>This method executes a TypeDB query with inference and explanation options enabled,\nand processes the results to provide detailed explanations of the inferred data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query</strong>:  The TypeDB query string to be explained.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of InferenceExplanation objects explaining the application\n      of inference rules in the derivation of the query answer.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">typedbhandler</span><span class=\"o\">.</span><span class=\"n\">InferenceExplanation</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.get_inference_rules", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.get_inference_rules", "kind": "function", "doc": "<p>Retrieves all the inference rules defined on the database and \nreturns their labels as a set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.close", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbhandler.TypeDBHandler.dict_from_answers", "modulename": "satrap.datamanagement.typedb.typedbhandler", "qualname": "TypeDBHandler.dict_from_answers", "kind": "function", "doc": "<p>Convert a list of TypeDB ConceptMap results into a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>typedb_result</strong>:  A list of ConceptMap objects from a TypeDB query.</li>\n<li><strong>key_var</strong>:  The variable name in typedb_result to be used as the key\nin the output dictionary.</li>\n<li><strong>value_var</strong>:  The variable name in typedb_result to be used as the value\nin the output dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary with keys and values extracted from the ConceptMap objects.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">typedb_result</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"n\">concept_map</span><span class=\"o\">.</span><span class=\"n\">ConceptMap</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">key_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">value_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager", "modulename": "satrap.datamanagement.typedb.typedbmanager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.create_database", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "create_database", "kind": "function", "doc": "<p>Creates a database and loads a schema.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n<li><strong>schema</strong>:  The filepath to the schema file that is used for the\ndatabase</li>\n<li><strong>reset</strong>:  Whether the database should be replaced in case such\na database already exists</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If <code>server_addr</code>, <code>db_name</code>, or <code>schema</code> are empty.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">schema</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/workspaces/cti-analysis-platform/satrap/assets/schema/cti-skb-types.tql&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.setup_db_schema", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "setup_db_schema", "kind": "function", "doc": "<p>Load a schema from a file containing a TypeQL define query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>schema_session</strong>:  A TypeDB Session of type SCHEMA</li>\n<li><strong>schema_file</strong>:  The path/name of the file containing the define query</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">schema_session</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">SessionType</span><span class=\"o\">.</span><span class=\"n\">SCHEMA</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">schema_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/workspaces/cti-analysis-platform/satrap/assets/schema/cti-skb-types.tql&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.fetch_query", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "fetch_query", "kind": "function", "doc": "<p>Run a fetch query on a TypeDB database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n<li><strong>query</strong>:  The fetch query</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the fetch query as a list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.get_query", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "get_query", "kind": "function", "doc": "<p>Run a get query on a TypeDB database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n<li><strong>query</strong>:  The fetch query</li>\n<li><strong>inference</strong>:  If True, runs the query with inference enabled</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the fetch query as a list</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">inference</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.aggregate_int_query", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "aggregate_int_query", "kind": "function", "doc": "<p>Run an aggregate query on a TypeDB database whose return \nis expected to be an integer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server.</li>\n<li><strong>db_name</strong>:  The name of the database.</li>\n<li><strong>query</strong>:  The aggregate query to be executed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The result of the aggregate query as an integer.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.delete_database", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "delete_database", "kind": "function", "doc": "<p>Delete a specified database.</p>\n\n<p>WARNING: Does not ask the user for permission!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typedbmanager.count_data_instances", "modulename": "satrap.datamanagement.typedb.typedbmanager", "qualname": "count_data_instances", "kind": "function", "doc": "<p>Count the number of elements in a given database</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_addr</strong>:  The address of the TypeDB server</li>\n<li><strong>db_name</strong>:  The name of the database</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server_addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">db_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder", "modulename": "satrap.datamanagement.typedb.typeql_builder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder", "kind": "class", "doc": "<p>Class for building the TypeQL representations of \nTypeDB components.</p>\n"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_entity", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_entity", "kind": "function", "doc": "<p>Create the TypeQL representation of an Entity.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity</strong>:  The entity to transform</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL string for this Entity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_relation", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_relation", "kind": "function", "doc": "<p>Create the TypeQL representation of a Relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>relation</strong>:  The relation to transform</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL string for this Relation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_thing", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_thing", "kind": "function", "doc": "<p>Builds a thing, i.e. either an entity or a relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>thing</strong>:  The thing to transform</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the Thing object is neither an entity,\nnor a relation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">thing</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_insert_query", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_insert_query", "kind": "function", "doc": "<p>Create the TypeQL representation of an Insert Query.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>insert_query</strong>:  The Insert Query to transform</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation for this InsertQuery</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">insert_query</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_variable", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_variable", "kind": "function", "doc": "<p>Create the TypeQL representation of a variable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>variable</strong>:  The name of the variable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation for this variable</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_attribute", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_attribute", "kind": "function", "doc": "<p>Create the TypeQL representation of an attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  The name of the attribute</li>\n<li><strong>value</strong>:  The value in TypeQL representation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_many_attributes", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_many_attributes", "kind": "function", "doc": "<p>Create the TypeQL representation of many attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attributes</strong>:  The names and values of the attributes</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the attributes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attributes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_typeql_type", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_typeql_type", "kind": "function", "doc": "<p>Create the TypeQL representation of the type of a thing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type</strong>:  The name of the type.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_role", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_role", "kind": "function", "doc": "<p>Create the TypeQL representation of a role in a relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>role_name</strong>:  The name of the role</li>\n<li><strong>variable_name</strong>:  The variable assigned to this role</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the role</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">role_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_all_roles", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_all_roles", "kind": "function", "doc": "<p>Create the TypeQL representation of all roles in a relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>roles</strong>:  The names and variables of the roles</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the roles are empty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the roles</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">roles</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.datamanagement.typedb.typeql_builder.TypeQLBuilder.build_end", "modulename": "satrap.datamanagement.typedb.typeql_builder", "qualname": "TypeQLBuilder.build_end", "kind": "function", "doc": "<p>Creates the TypeQL representation of the end of a thing.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL representation of the end</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl", "modulename": "satrap.etl", "kind": "module", "doc": "<p>SATRAP ETL package</p>\n"}, {"fullname": "satrap.etl.etlorchestrator", "modulename": "satrap.etl.etlorchestrator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator", "kind": "class", "doc": "<p>ETL Orchestrator for managing the Extract, Transform, and Load process.</p>\n"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.__init__", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.__init__", "kind": "function", "doc": "<p>Initialize the ETL Orchestrator</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extractor_type</strong>:  The type of data extractor from satrap.etl.extract.extract_constants.</li>\n<li><strong>transformer_cls</strong>:  The class responsible for data transformation.</li>\n<li><strong>loader_cls</strong>:  The class responsible for data loading.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">extractor_type</span>,</span><span class=\"param\">\ttransformer_cls=&lt;class &#x27;satrap.etl.transform.transformer.STIXtoTypeQLTransformer&#x27;&gt;,</span><span class=\"param\">\tloader_cls=&lt;class &#x27;satrap.etl.load.loader.TypeDBLoader&#x27;&gt;</span>)</span>"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.extractor", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.extractor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.transformer_cls", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.transformer_cls", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.loader_cls", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.loader_cls", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.extract", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.extract", "kind": "function", "doc": "<p>Extract a datasource using the extractor of this class and store it in a selected path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">store_at</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.transform", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.transform", "kind": "function", "doc": "<p>Transform the STIX objects in the file at the given path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">datasrc_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.load", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.load", "kind": "function", "doc": "<p>Load the transformed data into the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">server_address</span>, </span><span class=\"param\"><span class=\"n\">db_name</span>, </span><span class=\"param\"><span class=\"n\">transformed_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.etl", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.etl", "kind": "function", "doc": "<p>Run a complete ETL process, from getting a STIX datasource \nto loading it into a TypeDB database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  The URL of the datasource</li>\n<li><strong>server_address</strong>:  The address of the TypeDB Server.</li>\n<li><strong>db_name</strong>:  The name of the TypeDB database.</li>\n<li><strong>kwargs</strong>:  Additional optional parameters.\n<ul>\n<li>transform_src (str): The local file path of the STIX data source to be transformed.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ExtractionError</strong>:  If an error occurs during the extraction process.</li>\n<li><strong>ValueError</strong>:  If invalid settings are provided for loading data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">server_address</span>, </span><span class=\"param\"><span class=\"n\">db_name</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.etlorchestrator.ETLOrchestrator.transform_load", "modulename": "satrap.etl.etlorchestrator", "qualname": "ETLOrchestrator.transform_load", "kind": "function", "doc": "<p>Run a transform and load process for a given data file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_file</strong>:  The filepath of the file to be transformed.</li>\n<li><strong>server_address</strong>:  The address of the TypeDB Server.</li>\n<li><strong>db_name</strong>:  The name of the TypeDB database where data is to be loaded.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_file</span>, </span><span class=\"param\"><span class=\"n\">server_address</span>, </span><span class=\"param\"><span class=\"n\">db_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.exceptions", "modulename": "satrap.etl.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.ExtractionError", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError", "kind": "class", "doc": "<p>Exception raised for errors occurring during the extraction process.</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.etl.exceptions.ExtractionError.__init__", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.__init__", "kind": "function", "doc": "<p>Constructor for the ExtractionError class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_code</strong>:  The error code representing the type of error.</li>\n<li><strong>message</strong>:  Custom error message appended to the default error message\nthat corresponds to the error_code; defaults to None</li>\n<li><strong>datasrc</strong>:  The data source where the error occurred, defaults to None</li>\n<li><strong>class_origin</strong>:  The class where the error originated, defaults to None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_code</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">datasrc</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">class_origin</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satrap.etl.exceptions.ExtractionError.NO_TARGET_FILE", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.NO_TARGET_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "101"}, {"fullname": "satrap.etl.exceptions.ExtractionError.FAILED_DOWNLOAD", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.FAILED_DOWNLOAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "102"}, {"fullname": "satrap.etl.exceptions.ExtractionError.STIX_FILE_READ_FAILED", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.STIX_FILE_READ_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "103"}, {"fullname": "satrap.etl.exceptions.ExtractionError.EMPTY_STIX_FILE_READ", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.EMPTY_STIX_FILE_READ", "kind": "variable", "doc": "<p></p>\n", "default_value": "104"}, {"fullname": "satrap.etl.exceptions.ExtractionError.STIX_PARSING_FAILED", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.STIX_PARSING_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "105"}, {"fullname": "satrap.etl.exceptions.ExtractionError.MISP_ERROR", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.MISP_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "106"}, {"fullname": "satrap.etl.exceptions.ExtractionError.STORE_MISP", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.STORE_MISP", "kind": "variable", "doc": "<p></p>\n", "default_value": "107"}, {"fullname": "satrap.etl.exceptions.ExtractionError.GENERIC_EXTRACTION_ERROR", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.GENERIC_EXTRACTION_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "108"}, {"fullname": "satrap.etl.exceptions.ExtractionError.ERROR_MESSAGES", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.ERROR_MESSAGES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{102: &#x27;Download failed&#x27;, 101: &#x27;No target storage file specified&#x27;, 103: &#x27;Reading of STIX source failed&#x27;, 104: &quot;The STIX Object is not a bundle or has no &#x27;objects&#x27; property&quot;, 105: &#x27;Parsing of STIX datasource failed&#x27;, 106: &#x27;MISP error&#x27;, 107: &#x27;Storage of STIX file of MISP events failed&#x27;, 108: &#x27;Error during the extraction process&#x27;}"}, {"fullname": "satrap.etl.exceptions.ExtractionError.error_code", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.error_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.ExtractionError.origin_info", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.origin_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.ExtractionError.message", "modulename": "satrap.etl.exceptions", "qualname": "ExtractionError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.MappingException", "modulename": "satrap.etl.exceptions", "qualname": "MappingException", "kind": "class", "doc": "<p>Exceptions occurring during the mapping of STIX objects</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.etl.exceptions.MappingException.__init__", "modulename": "satrap.etl.exceptions", "qualname": "MappingException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "satrap.etl.exceptions.MappingException.message", "modulename": "satrap.etl.exceptions", "qualname": "MappingException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.TransformationError", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError", "kind": "class", "doc": "<p>Exceptions occurred during the transformation of STIX Objects</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.etl.exceptions.TransformationError.__init__", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reference_id</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "satrap.etl.exceptions.TransformationError.MISSING_REQUIRED_PROPERTY", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.MISSING_REQUIRED_PROPERTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "201"}, {"fullname": "satrap.etl.exceptions.TransformationError.UNSPECIFIED_PROPERTY", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.UNSPECIFIED_PROPERTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "202"}, {"fullname": "satrap.etl.exceptions.TransformationError.UNSUPPORTED_CUSTOM_TYPE", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.UNSUPPORTED_CUSTOM_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "203"}, {"fullname": "satrap.etl.exceptions.TransformationError.INVALID_PROPERTY_VALUE", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.INVALID_PROPERTY_VALUE", "kind": "variable", "doc": "<p></p>\n", "default_value": "204"}, {"fullname": "satrap.etl.exceptions.TransformationError.INVALID_PROPERTY_TYPE", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.INVALID_PROPERTY_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "205"}, {"fullname": "satrap.etl.exceptions.TransformationError.GENERIC_ERROR", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.GENERIC_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "206"}, {"fullname": "satrap.etl.exceptions.TransformationError.ERROR_MESSAGES", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.ERROR_MESSAGES", "kind": "variable", "doc": "<p></p>\n", "default_value": "{201: &#x27;Missing required property in STIX object&#x27;, 202: &#x27;Property not specified&#x27;, 203: &#x27;The STIX object has an unsupported custom type&#x27;, 204: &#x27;Invalid value for property&#x27;, 205: &#x27;Invalid type for property&#x27;, 206: &#x27;An error occurred during the transformation of the STIX object&#x27;}"}, {"fullname": "satrap.etl.exceptions.TransformationError.error_code", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.error_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.TransformationError.reference_id", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.reference_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.TransformationError.message", "modulename": "satrap.etl.exceptions", "qualname": "TransformationError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.LoadingError", "modulename": "satrap.etl.exceptions", "qualname": "LoadingError", "kind": "class", "doc": "<p>Exception raised for errors occurring during the loading process.</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.etl.exceptions.LoadingError.__init__", "modulename": "satrap.etl.exceptions", "qualname": "LoadingError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">failed_query</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span></span>)</span>"}, {"fullname": "satrap.etl.exceptions.LoadingError.batch_size", "modulename": "satrap.etl.exceptions", "qualname": "LoadingError.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.STIXParsingError", "modulename": "satrap.etl.exceptions", "qualname": "STIXParsingError", "kind": "class", "doc": "<p>Exceptions occurred during the parsing of STIX Objects\nfrom a JSON file.</p>\n", "bases": "builtins.Exception"}, {"fullname": "satrap.etl.exceptions.STIXParsingError.__init__", "modulename": "satrap.etl.exceptions", "qualname": "STIXParsingError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">original_exception</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">TransformationError</span>,</span><span class=\"param\">\t<span class=\"n\">datasrc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">class_origin</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "satrap.etl.exceptions.STIXParsingError.err_type", "modulename": "satrap.etl.exceptions", "qualname": "STIXParsingError.err_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.STIXParsingError.origin_info", "modulename": "satrap.etl.exceptions", "qualname": "STIXParsingError.origin_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.exceptions.STIXParsingError.message", "modulename": "satrap.etl.exceptions", "qualname": "STIXParsingError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.extract", "modulename": "satrap.etl.extract", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.extract.extract_constants", "modulename": "satrap.etl.extract.extract_constants", "kind": "module", "doc": "<p>Constants for the extractor.</p>\n"}, {"fullname": "satrap.etl.extract.extract_constants.DOWNLOADER", "modulename": "satrap.etl.extract.extract_constants", "qualname": "DOWNLOADER", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "satrap.etl.extract.extract_constants.MISP_EXTRACTOR", "modulename": "satrap.etl.extract.extract_constants", "qualname": "MISP_EXTRACTOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "satrap.etl.extract.extract_constants.STIX_READER", "modulename": "satrap.etl.extract.extract_constants", "qualname": "STIX_READER", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "satrap.etl.extract.extract_constants.OVERRIDE", "modulename": "satrap.etl.extract.extract_constants", "qualname": "OVERRIDE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;override&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.TARGET", "modulename": "satrap.etl.extract.extract_constants", "qualname": "TARGET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;target&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.MISP_APIKEY", "modulename": "satrap.etl.extract.extract_constants", "qualname": "MISP_APIKEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;apikey&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.BASE_TIME", "modulename": "satrap.etl.extract.extract_constants", "qualname": "BASE_TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "datetime.datetime(1970, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)"}, {"fullname": "satrap.etl.extract.extract_constants.EXTRACT_SUCCESS", "modulename": "satrap.etl.extract.extract_constants", "qualname": "EXTRACT_SUCCESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Extraction successfully finished&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.READ_STIX_START", "modulename": "satrap.etl.extract.extract_constants", "qualname": "READ_STIX_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Reading STIX source: %s&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.READ_STIX_FAILED", "modulename": "satrap.etl.extract.extract_constants", "qualname": "READ_STIX_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Reading of STIX source failed: %s&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.READ_STIX_SUCCESS", "modulename": "satrap.etl.extract.extract_constants", "qualname": "READ_STIX_SUCCESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;STIX objects fetched from %s&#x27;"}, {"fullname": "satrap.etl.extract.extract_constants.READ_STIX_NO_OBJECTS", "modulename": "satrap.etl.extract.extract_constants", "qualname": "READ_STIX_NO_OBJECTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Read STIX Object is either no bundle or does not have &#x27;objects&#x27;&quot;"}, {"fullname": "satrap.etl.extract.extract_constants.REQUIRED_ARG", "modulename": "satrap.etl.extract.extract_constants", "qualname": "REQUIRED_ARG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;The required argument &#x27;%s&#x27; is missing&quot;"}, {"fullname": "satrap.etl.extract.extractor", "modulename": "satrap.etl.extract.extractor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.extract.extractor.Extractor", "modulename": "satrap.etl.extract.extractor", "qualname": "Extractor", "kind": "class", "doc": "<p>Extracts data from diverse datasources.</p>\n", "bases": "abc.ABC"}, {"fullname": "satrap.etl.extract.extractor.Extractor.get_extractor", "modulename": "satrap.etl.extract.extractor", "qualname": "Extractor.get_extractor", "kind": "function", "doc": "<p>Returns an extractor suitable for a given type of extraction.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extract_type</strong>:  the type of extraction, e.g. download, read_stix</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the given extraction type is not defined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the corresponding extractor implementation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">extract_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.Extractor.fetch", "modulename": "satrap.etl.extract.extractor", "qualname": "Extractor.fetch", "kind": "function", "doc": "<p>Fetches the data from 'src'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  the source of the data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.Extractor.get_extractor_type", "modulename": "satrap.etl.extract.extractor", "qualname": "Extractor.get_extractor_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.Downloader", "modulename": "satrap.etl.extract.extractor", "qualname": "Downloader", "kind": "class", "doc": "<p>Downloader.</p>\n\n<p>Fetches the data by downloading and saving them.</p>\n", "bases": "Extractor"}, {"fullname": "satrap.etl.extract.extractor.Downloader.get_extractor_type", "modulename": "satrap.etl.extract.extractor", "qualname": "Downloader.get_extractor_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.Downloader.fetch", "modulename": "satrap.etl.extract.extractor", "qualname": "Downloader.fetch", "kind": "function", "doc": "<p>Downloads the data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  the url of the file that is to be downloaded</li>\n<li><strong>kwargs</strong>:  optional parameters\n<ul>\n<li>override (bool): if True, the file will be overwritten </li>\n<li>target (str): the filepath of the file where to store the data</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ExtractionError</strong>:  If the extraction fails</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor", "kind": "class", "doc": "<p>STIXExtractor.</p>\n\n<p>Read and parse a STIX source file and return the objects.</p>\n", "bases": "Extractor"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor.get_extractor_type", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor.get_extractor_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor.replace_attribute", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor.replace_attribute", "kind": "function", "doc": "<p>Replaces a value in a STIX Object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_obj</strong>:  The STIX Object whose attribute value should\nbe overridden</li>\n<li><strong>attribute</strong>:  The name of the attribute</li>\n<li><strong>new_value</strong>:  The value that replaces the old value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The STIX Object with the replaced attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stix_obj</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new_value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor.adapt_stix_object", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor.adapt_stix_object", "kind": "function", "doc": "<p>Adapt the STIX objects such that they follow defined rules.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_object</strong>:  The STIX object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The adapted STIX Object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stix_object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor.adapt_meta_object", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor.adapt_meta_object", "kind": "function", "doc": "<p>Adapt a STIX meta object in agreement with the predefined JSON mapping\nfile for SMOs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>meta_object</strong>:  The SMO to be adapted if needed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">meta_object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.STIXExtractor.fetch", "modulename": "satrap.etl.extract.extractor", "qualname": "STIXExtractor.fetch", "kind": "function", "doc": "<p>Reads the STIX 2.1 data from a JSON file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  The filepath where to read the data from</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ExtractionError</strong>:  If the STIX source is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The STIX Objects</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.MISPExtractor", "modulename": "satrap.etl.extract.extractor", "qualname": "MISPExtractor", "kind": "class", "doc": "<p>Fetches events from a MISP instance</p>\n", "bases": "Extractor"}, {"fullname": "satrap.etl.extract.extractor.MISPExtractor.get_extractor_type", "modulename": "satrap.etl.extract.extractor", "qualname": "MISPExtractor.get_extractor_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.extract.extractor.MISPExtractor.fetch", "modulename": "satrap.etl.extract.extractor", "qualname": "MISPExtractor.fetch", "kind": "function", "doc": "<p>Fetches the data from 'src'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>src</strong>:  the source of the data</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.load", "modulename": "satrap.etl.load", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.load.loader", "modulename": "satrap.etl.load.loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.load.loader.Loader", "modulename": "satrap.etl.load.loader", "qualname": "Loader", "kind": "class", "doc": "<p>Loader.</p>\n\n<p>Loads data into a data collection, e.g. a database.</p>\n", "bases": "abc.ABC"}, {"fullname": "satrap.etl.load.loader.Loader.load", "modulename": "satrap.etl.load.loader", "qualname": "Loader.load", "kind": "function", "doc": "<p>Loads the given data in a data collection.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  The data that should be loaded</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader", "kind": "class", "doc": "<p>TypeDB Loader.</p>\n\n<p>Executes TypeDB insert queries on a TypeDB database instance.</p>\n", "bases": "Loader"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader.__init__", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">database_server_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">database_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span></span>)</span>"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader.server_address", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader.server_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader.db_name", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader.db_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader.batch_size", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader.batch_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.load.loader.TypeDBLoader.load", "modulename": "satrap.etl.load.loader", "qualname": "TypeDBLoader.load", "kind": "function", "doc": "<p>Load a list of InsertQuery objects into the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>:  A list of objects representing TypeQL insert queries</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.load.log_messages", "modulename": "satrap.etl.load.log_messages", "kind": "module", "doc": "<p>Log messages for the loader.</p>\n"}, {"fullname": "satrap.etl.load.log_messages.LOAD_DATA_START", "modulename": "satrap.etl.load.log_messages", "qualname": "LOAD_DATA_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Start loading data...&#x27;"}, {"fullname": "satrap.etl.load.log_messages.LOAD_DATA_END", "modulename": "satrap.etl.load.log_messages", "qualname": "LOAD_DATA_END", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;End loading: %i insert queries processed&#x27;"}, {"fullname": "satrap.etl.stix_constants", "modulename": "satrap.etl.stix_constants", "kind": "module", "doc": "<p>Constants related to STIX 2.1</p>\n"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_ID", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;id&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_TYPE", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;type&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_RELATIONSHIP_TYPE", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_RELATIONSHIP_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relationship_type&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_SOURCE_REF", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_SOURCE_REF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;source_ref&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_TARGET_REF", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_TARGET_REF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;target_ref&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_EXTENSIONS", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_EXTENSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;extensions&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_BUNDLE_OBJECTS", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_BUNDLE_OBJECTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;objects&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_X509_V3_EXTENSIONS", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_X509_V3_EXTENSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;x509_v3_extensions&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_CREATED", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_CREATED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;created&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_MODIFIED", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_MODIFIED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;modified&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_PROPERTY_MARKING_DEF_DEFINITION", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_PROPERTY_MARKING_DEF_DEFINITION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;definition&#x27;"}, {"fullname": "satrap.etl.stix_constants.TIMESTAMP_DATE_SEPARATOR", "modulename": "satrap.etl.stix_constants", "qualname": "TIMESTAMP_DATE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;-&#x27;"}, {"fullname": "satrap.etl.stix_constants.TIMESTAMP_DATE_TIME_SEPARATOR", "modulename": "satrap.etl.stix_constants", "qualname": "TIMESTAMP_DATE_TIME_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;T&#x27;"}, {"fullname": "satrap.etl.stix_constants.TIMESTAMP_TIME_SEPARATOR", "modulename": "satrap.etl.stix_constants", "qualname": "TIMESTAMP_TIME_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;:&#x27;"}, {"fullname": "satrap.etl.stix_constants.TIMESTAMP_MILLIS_SEPARATOR", "modulename": "satrap.etl.stix_constants", "qualname": "TIMESTAMP_MILLIS_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.&#x27;"}, {"fullname": "satrap.etl.stix_constants.TIMESTAMP_ENDING", "modulename": "satrap.etl.stix_constants", "qualname": "TIMESTAMP_ENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Z&#x27;"}, {"fullname": "satrap.etl.stix_constants.STIX_TIMESTAMP_REGEX", "modulename": "satrap.etl.stix_constants", "qualname": "STIX_TIMESTAMP_REGEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\\\.\\\\d+)?Z$&#x27;"}, {"fullname": "satrap.etl.transform", "modulename": "satrap.etl.transform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.log_messages", "modulename": "satrap.etl.transform.log_messages", "kind": "module", "doc": "<p>Log messages for the transformer.</p>\n"}, {"fullname": "satrap.etl.transform.log_messages.CREATE_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "CREATE_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Creating STIX Object...&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.CREATE_SUCCESS", "modulename": "satrap.etl.transform.log_messages", "qualname": "CREATE_SUCCESS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_id</span>, </span><span class=\"param\"><span class=\"n\">stix_type</span>, </span><span class=\"param\"><span class=\"n\">class_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTIES_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTIES_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Adding TypeDB attributes...&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Building extensions...&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FAILED_MISSING_OBJECT", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FAILED_MISSING_OBJECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;No extension object found for defined extension&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Search relevant extension...&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_MULTIPLE_DEFINED", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_MULTIPLE_DEFINED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Extension &#x27;%s&#x27; already defined. Skip.&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_FOUND", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_FOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;STIX extension found: &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_CUSTOM", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_CUSTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Custom STIX extension not supported. Skip extension &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_FINAL", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_FINAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Relevant extension: &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_FIND_NOTHING_FOUND", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_FIND_NOTHING_FOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;No relevant extension found&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_BUILD_PROPERTIES_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_BUILD_PROPERTIES_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Building properties for extension: &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_PROPERTY_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_PROPERTY_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Building extension property &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.EXTENSIONS_PROPERTY_TRANSFORM", "modulename": "satrap.etl.transform.log_messages", "qualname": "EXTENSIONS_PROPERTY_TRANSFORM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Assignments to &#x27;%s&#x27;: TypeDB name &#x27;%s&#x27; and value type &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTY", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Property &#x27;%s&#x27;: &quot;"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTY_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTY_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Property &#x27;%s&#x27;: Start building&quot;"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTY_CUSTOM_ENCOUNTERED", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTY_CUSTOM_ENCOUNTERED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Custom property encountered: Property &#x27;%s&#x27;: &quot;"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTY_SUCCESS", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTY_SUCCESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Property &#x27;%s&#x27; mapped to attribute &#x27;%s&#x27; of type &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.PROPERTY_CUSTOM", "modulename": "satrap.etl.transform.log_messages", "qualname": "PROPERTY_CUSTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Unsupported custom property. Skipping property &#x27;%s&#x27; in STIX object &#x27;%s&#x27;.&quot;"}, {"fullname": "satrap.etl.transform.log_messages.DETERMINE_TYPE_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "DETERMINE_TYPE_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Determine type&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.DETERMINE_TYPE_FINISHED", "modulename": "satrap.etl.transform.log_messages", "qualname": "DETERMINE_TYPE_FINISHED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Chosen TypeDB type: &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.BUILD_CUSTOM_OBJECT_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "BUILD_CUSTOM_OBJECT_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Custom STIX object not supported. Skip object &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.BUILD_CORE_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "BUILD_CORE_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Building TypeQL statements for &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.SET_UP_MATCH_START", "modulename": "satrap.etl.transform.log_messages", "qualname": "SET_UP_MATCH_START", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;set up match object&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.MAPPING_INVALID", "modulename": "satrap.etl.transform.log_messages", "qualname": "MAPPING_INVALID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Invalid mapping in &#x27;{reference}&#x27; for &#x27;{stix_name}&#x27;: &#x27;{stix_value}&#x27;.\\n{exception}&quot;"}, {"fullname": "satrap.etl.transform.log_messages.INVALID_SCHEMA", "modulename": "satrap.etl.transform.log_messages", "qualname": "INVALID_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Schema invalid&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.CONVERSION_FAILED", "modulename": "satrap.etl.transform.log_messages", "qualname": "CONVERSION_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Conversion of type \\&#x27;{value_type}\\&#x27; failed in \\&#x27;{reference}\\&#x27; for &quot;{stix_name}&quot;: &quot;{stix_value}&quot;. {exception}&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.UNEXPECTED_EXCEPTION", "modulename": "satrap.etl.transform.log_messages", "qualname": "UNEXPECTED_EXCEPTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;An unexpected exception occurred&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.START_TRANSFORM", "modulename": "satrap.etl.transform.log_messages", "qualname": "START_TRANSFORM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Start transformation...&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.STIX_OBJECT_CREATION_FAILED", "modulename": "satrap.etl.transform.log_messages", "qualname": "STIX_OBJECT_CREATION_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Creation of STIX Object &#x27;%s&#x27; failed&quot;"}, {"fullname": "satrap.etl.transform.log_messages.BUILD_TYPEQL_FAILED", "modulename": "satrap.etl.transform.log_messages", "qualname": "BUILD_TYPEQL_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Creation of TypeQL statement failed for STIX Object &#x27;%s&#x27;&quot;"}, {"fullname": "satrap.etl.transform.log_messages.BUILD_TYPEQL_FAILED_TRANSF", "modulename": "satrap.etl.transform.log_messages", "qualname": "BUILD_TYPEQL_FAILED_TRANSF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Creation of TypeQL statement failed&#x27;"}, {"fullname": "satrap.etl.transform.log_messages.TRANSFORMATION_COMPLETED", "modulename": "satrap.etl.transform.log_messages", "qualname": "TRANSFORMATION_COMPLETED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Transformation of &#x27;%s&#x27; completed&quot;"}, {"fullname": "satrap.etl.transform.log_messages.BUILDING_FAILED", "modulename": "satrap.etl.transform.log_messages", "qualname": "BUILDING_FAILED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Building failed&#x27;"}, {"fullname": "satrap.etl.transform.query", "modulename": "satrap.etl.transform.query", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.QueryBundle", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle", "kind": "class", "doc": "<p>Manages the insertions in a transformation process from \nSTIX 2.1 to TypeDB.</p>\n"}, {"fullname": "satrap.etl.transform.query.QueryBundle.__init__", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.__init__", "kind": "function", "doc": "<p>Instantiates an empty QueryBundle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "satrap.etl.transform.query.QueryBundle.main_object_type", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.main_object_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satrap.etl.transform.query.QueryBundle.main_object", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.main_object", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.QueryBundle.attributes", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.attributes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.QueryBundle.embedded_relations", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.embedded_relations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.QueryBundle.add_main_entity", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.add_main_entity", "kind": "function", "doc": "<p>Add the main STIX object to the queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>main_object</strong>:  The main STIX Object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">main_object</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.add_main_relation", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.add_main_relation", "kind": "function", "doc": "<p>Add the main object to the queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>main_object</strong>:  The main STIX Object</li>\n<li><strong>args</strong>:  The match objects</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AttributeError</strong>:  If a main object in this query bundle \nalready exists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">main_object</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.add_structured_attribute", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.add_structured_attribute", "kind": "function", "doc": "<p>Add an attribute that is implemented as further insertions,\ne.g. a composite type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attribute</strong>:  The entity that represents the attribute</li>\n<li><strong>relation</strong>:  The relation that connects the attribute with \nthe main object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Entity</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.add_embedded_relation", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.add_embedded_relation", "kind": "function", "doc": "<p>Add an embedded relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>match1</strong>:  The first thing in the relation</li>\n<li><strong>match2</strong>:  The second thing in the relation</li>\n<li><strong>relation</strong>:  The relation that connects the two entities</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">match1</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span>,</span><span class=\"param\">\t<span class=\"n\">match2</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.extend", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.extend", "kind": "function", "doc": "<p>Extend this QueryBundle by the contents of another. \nThis is not allowed if both contain a main object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query_bundle</strong>:  The second QueryBundle</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If both QueryBundles contain \na main object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query_bundle</span><span class=\"p\">:</span> <span class=\"n\">Self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.order_bundle", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.order_bundle", "kind": "function", "doc": "<p>Construct the three InsertQueries. \nThe first one represents the entities and has to be executed \nfirst.\nThe second one represents the STIX relationship objects and has \nto be inserted after all entity queries have been inserted.\nThe third one represents the embedded relations and has to be \ninserted after all other queries have been inserted.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If there is not a main object but the \nQueryBundle is not empty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The three InsertQueries. If an InsertQuery is empty,\n      None is returned for this InsertQuery</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.QueryBundle.is_empty", "modulename": "satrap.etl.transform.query", "qualname": "QueryBundle.is_empty", "kind": "function", "doc": "<p>States whether this QueryBundle is empty, i.e. whether \nthere are no main object, no attributes and no embedded \nrelations.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Whether this QueryBundle is empty</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification", "modulename": "satrap.etl.transform.query", "qualname": "Identification", "kind": "class", "doc": "<p>Class to identify a TypeDB object.</p>\n\n<p>Uses the stix-id as a key attribute, a variable for a reference\nwithin a query and the TypeDB object type for generating the \nTypeQL representation.</p>\n"}, {"fullname": "satrap.etl.transform.query.Identification.__init__", "modulename": "satrap.etl.transform.query", "qualname": "Identification.__init__", "kind": "function", "doc": "<p>Identifies an object in TypeDB.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The value of the key attribute in the schema</li>\n<li><strong>variable</strong>:  The variable used in a query for the \nreferenced object</li>\n<li><strong>object_type</strong>:  The TypeDB object type of the referenced \nobject</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">object_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.query.Identification.id", "modulename": "satrap.etl.transform.query", "qualname": "Identification.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.Identification.variable", "modulename": "satrap.etl.transform.query", "qualname": "Identification.variable", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.Identification.object_type", "modulename": "satrap.etl.transform.query", "qualname": "Identification.object_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.query.Identification.get_id", "modulename": "satrap.etl.transform.query", "qualname": "Identification.get_id", "kind": "function", "doc": "<p>Returns the id of the referenced object.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If there is no ID given for the referenced \nobject.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The id of the object it identifies</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification.get_variable", "modulename": "satrap.etl.transform.query", "qualname": "Identification.get_variable", "kind": "function", "doc": "<p>Returns the variable of the referenced object.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If there is no variable given for this \nobject.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The variable of the object it identifies</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification.get_type", "modulename": "satrap.etl.transform.query", "qualname": "Identification.get_type", "kind": "function", "doc": "<p>Returns the TypeDB object type of the referenced object.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If there is no type given for the \nreferenced object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The type of the object it identifies</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification.get_match_object", "modulename": "satrap.etl.transform.query", "qualname": "Identification.get_match_object", "kind": "function", "doc": "<p>Returns a TypeDB object that references/ matches the\nobject that this object references.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If this object cannot be matched by ID,\ni.e. if there is no ID or no type given.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A match statement to get the underlying object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification.can_be_ref_by_var", "modulename": "satrap.etl.transform.query", "qualname": "Identification.can_be_ref_by_var", "kind": "function", "doc": "<p>States whether this object can be referenced by variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Whether the underlying object can be referenced by \n      variable.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.query.Identification.can_be_ref_by_id", "modulename": "satrap.etl.transform.query", "qualname": "Identification.can_be_ref_by_id", "kind": "function", "doc": "<p>States whether this object can be referenced by ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Whether the underlying object can be referenced by id</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper", "kind": "class", "doc": "<p>Handles the mapping file that describes how to translate \nSTIX 2.1 to the TypeDB schema.</p>\n"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.classes", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.classes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.stix_objects", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.stix_objects", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.composites_mapping", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.composites_mapping", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.common_attributes", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.common_attributes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.sros_role_info", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.sros_role_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.key_value_pairs", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.key_value_pairs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.dictionary_data", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.dictionary_data", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.split_type", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.split_type", "kind": "function", "doc": "<p>Splits a compound value type to its ingredients according \nto the mapping.\nIf it is indeed a NonPrimitive Type, then the first value is \nthe abstract and the second the subtype. Otherwise, the first\nvalue is the value type and the second is empty.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value_type</strong>:  The type of a value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The abstract and subtype of the type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.join_type", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.join_type", "kind": "function", "doc": "<p>Join an abstract and specific type together according \nto the mapping.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tl_type</strong>:  The top-level-/ abstract  type</li>\n<li><strong>subtype</strong>:  The sub-/ specific type</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The two types joined together</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tl_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.validate", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.validate", "kind": "function", "doc": "<p>Validates STIX to TypeDB JSON mappings against predefined schema files.</p>\n\n<p>This function reads various schema files in JSON format and validates\nthe corresponding mappings in the STIXtoTypeDBMapper class against these\nschemas. The schemas include classes, STIX objects, composites, SRO roles,\nkey-value pairs, a dictionary type, and common attributes.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValidationError</strong>:  If a mapping file does not match the schema</li>\n<li><strong>SchemaError</strong>:  If a JSON schema file is invalid</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_data", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_data", "kind": "function", "doc": "<p>Loads the data of the JSON map.</p>\n\n<p>Note that though every function calls this function here, \nthe data is loaded only once. Therefore, the first call to \nthis method decides which mappings to load.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>validate</strong>:  Whether the data should be validated, too</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SchemaError</strong>:  If the schema is invalid \nand validate = True</li>\n<li><strong>ValidationError</strong>:  If the mapping is invalid\nand validate = True</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_class", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_class", "kind": "function", "doc": "<p>Returns the class used to build this STIX type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_object_type</strong>:  The type of the STIX object, \ne.g. attack-pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The class used for the building, None if the type \n      is a custom type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_object_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_typeql_thing_name", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_typeql_thing_name", "kind": "function", "doc": "<p>Returns the name of the TypeQL thing for a certain \nSTIX Object. E.g. \"attack-pattern\" -> \"attack-pattern\".</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_type</strong>:  The type of the STIX object</li>\n<li><strong>stix_properties</strong>:  The properties of the STIX Object</li>\n<li><strong>stix_extensions</strong>:  The extensions of the STIX Object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the Type cannot be determined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the object in TypeDB, None if the type \n      is a custom type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stix_properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">stix_extensions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_typedb_supertype", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_typedb_supertype", "kind": "function", "doc": "<p>Returns the least abstract supertype in TypeDB for a STIX \nobject type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_type</strong>:  The STIX Object type, e.g. attack-pattern</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the stix type is not defined or the\nmapping is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The least abstract supertype in TypeDB for a STIX Object \n      type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_default_value_implementation", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_default_value_implementation", "kind": "function", "doc": "<p>Returns the default value type for a value of unknown type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value whose type is unknown</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the value type, None if no value type\n      is defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_roleplayers_for_SRO", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_roleplayers_for_SRO", "kind": "function", "doc": "<p>Gives the properties that are implemented as roleplayers in\na STIX relationship object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_type</strong>:  The type of the STIX object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the STIX type does not exist</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The properties that specify roleplayers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_object_attribute_info", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_object_attribute_info", "kind": "function", "doc": "<p>Returns the name and value of an attribute in the \nTypeDB Schema.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_object</strong>:  The type of the STIX object, \ne.g. attack-pattern</li>\n<li><strong>stix_attribute</strong>:  The attribute of the STIX Object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the stix type is not defined\nor the mapping is not valid/ complete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeDB name and value, None if the attribute\n      is a custom attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_object</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stix_attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_composite_name", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_composite_name", "kind": "function", "doc": "<p>Returns the TypeDB name used for the composite type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>composite_type</strong>:  The STIX name of the composite type</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the composite type does not exist,\ni.e. the mapping is invalid or incomplete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeDB name used for the composite type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">composite_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_composite_attribute_info", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_composite_attribute_info", "kind": "function", "doc": "<p>Returns the TypeDB name of a specified attribute of a \nspecified composite type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>composite_type</strong>:  The name of the composite type</li>\n<li><strong>stix_property</strong>:  The name of the STIX attribute</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the composite type or attribute\nis not defined in the mapping</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeDB name and value type for the attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">composite_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stix_property</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_composite_type_relation", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_composite_type_relation", "kind": "function", "doc": "<p>Returns the name of the helper relation for the composite \ntype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>composite_type</strong>:  The name of the composite type</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the composite type does not exist\nor no relation is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the helper relation of the composite type</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">composite_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_composite_relation_roles", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_composite_relation_roles", "kind": "function", "doc": "<p>Returns the names of the roles of the helper relation of a \ncomposite type, i.e. the name of the object's role and the name\nof the values' role.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>composite_type</strong>:  The name of the composite value type </li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the composite type does not exist\nor its definition is incomplete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the object's and values' role</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">composite_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_sro_role", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_sro_role", "kind": "function", "doc": "<p>Returns the name of the role for an SRO attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>relation_name</strong>:  The name of the SRO</li>\n<li><strong>role</strong>:  The name of the attribute </li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the relation is not defined or the \nattribute is not implemented as a roleplayer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the role and TypeDB object type that \n      plays the role</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">relation_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_embedded_relation_roles", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_embedded_relation_roles", "kind": "function", "doc": "<p>Returns the object's and value's role using the name of the\nattribute specified for the TypeDB translation of a STIX \nproperty.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attribute_name</strong>:  The specified attribute name for the\nTypeDB translation</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the attribute name does not \nfulfill the required format</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the object's and value's role</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attribute_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_key_value_pair_key_translation", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_key_value_pair_key_translation", "kind": "function", "doc": "<p>Returns the entity type of the key. Returns None if the key\nis not defined.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pair_type</strong>:  The name of the Pair Type</li>\n<li><strong>key</strong>:  The name of the key</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the Mapping is invalid or \nincomplete or the pair type does not exist</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the TypeDB Entity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pair_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_key_value_pair_custom", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_key_value_pair_custom", "kind": "function", "doc": "<p>Returns the name of the custom entity and the attribute \nname for the key.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pair_type</strong>:  The name of the pair type</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the Mapping is invalid or incomplete\nor the pair type does not exist</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the entity and key attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_pairs_value_and_type", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_pairs_value_and_type", "kind": "function", "doc": "<p>Returns the attribute name and value type of the pair type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pair_type</strong>:  The name of the pair type</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the Mapping is invalid or incomplete\nor the pair type does not exist</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The attribute name and value type for the values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pair_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_pair_relation", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_pair_relation", "kind": "function", "doc": "<p>Returns the relation name of the helper relation for the \npair type and the roles for the object and pair item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pair_type</strong>:  The name of the pair type</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the pair type does not exist or \nthe mapping is invalid/ incomplete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the relation, object role and item role</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pair_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_dictionary_item_data", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_dictionary_item_data", "kind": "function", "doc": "<p>Returns the name of the item entity, the name of the key \nattribute name of the value attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value_type</strong>:  The type of the value of the item</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the mapping is invalid/incomplete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the item entity, key attribute and value \n      attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_dictionary_relation_data", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_dictionary_relation_data", "kind": "function", "doc": "<p>Returns the name of the relation and roles used for building \nthe dictionary, i.e. connecting the object to the items.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If there is no relation specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the relation, role of the item and role\n      of the object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_dictionary_property_attribute", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_dictionary_property_attribute", "kind": "function", "doc": "<p>Gives the name of the attribute used for the name of the \nSTIX property that is implemented as a dictionary.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the mapping is invalid or \nincomplete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the attribute for the name of the STIX \n      property</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.get_extension_attribute_info", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.get_extension_attribute_info", "kind": "function", "doc": "<p>Returns the attribute info of an extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_object</strong>:  The name of the STIX type, e.g. malware</li>\n<li><strong>stix_extension</strong>:  The name of the extension</li>\n<li><strong>stix_name</strong>:  The name of the attribute</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the stix type or extension is not \ndefined in the mapping</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name and type of the attribute in TypeDB,\n      (None, None) if it a custom attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_object</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stix_extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">stix_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_to_typedb_mapper.STIXtoTypeDBMapper.is_defined_extension", "modulename": "satrap.etl.transform.stix_to_typedb_mapper", "qualname": "STIXtoTypeDBMapper.is_defined_extension", "kind": "function", "doc": "<p>States whether an extension name is defined according to\nSTIX 2.1 or not, that means it is a custom extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_type</strong>:  The type of the STIX object</li>\n<li><strong>extension_name</strong>:  The name of the extension</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If the stix type is not defined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Whether the extension is a predefined extension</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">extension_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stix_typeql_constants", "modulename": "satrap.etl.transform.stix_typeql_constants", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEDB_ID_ATTRIBUTE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEDB_ID_ATTRIBUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;stix-id&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_COMPOSITES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_COMPOSITES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/composites.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SDO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SDO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/sdos.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SRO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SRO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/sros.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/scos.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SMO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SMO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/smos.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_CLASSES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_CLASSES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/classes.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_COMMON_ATTRIBUTES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_COMMON_ATTRIBUTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/common_attributes.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SRO_ROLES_INFO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SRO_ROLES_INFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/sros_roles.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_KEY_VALUE_PAIRS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_KEY_VALUE_PAIRS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/key-value-pairs.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_DICTIONARY_DATA", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_DICTIONARY_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/dictionary.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.SCHEMAS_DIR", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "SCHEMAS_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_STIX_OBJECTS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_STIX_OBJECTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/stix_objects_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_EMBEDDEDS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_EMBEDDEDS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/embedded_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_COMPOSITES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_COMPOSITES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/composites_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_SRO_ROLES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_SRO_ROLES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/sro_roles_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_KV_PAIRS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_KV_PAIRS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/key_value_pairs_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_DICT", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_DICT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/dictionary_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_COMMON_ATTRIBUTES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_COMMON_ATTRIBUTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/common_attributes_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.FILE_SCHEMA_CLASSES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "FILE_SCHEMA_CLASSES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping/schemas/classes_schema.json&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_CLASS_SDO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_CLASS_SDO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;STIXDomainObject&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_CLASS_SCO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_CLASS_SCO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;STIXCyberObservable&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_CLASS_SRO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_CLASS_SRO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;STIXRelationshipObject&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_CLASS_SMO", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_CLASS_SMO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;STIXMetaObject&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.OBJECTS_TYPEDB_TYPE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "OBJECTS_TYPEDB_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;typedb-thing-type&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.OBJECTS_SUBTYPES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "OBJECTS_SUBTYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;subtypes&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.OBJECTS_EXTENSIONS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "OBJECTS_EXTENSIONS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;extensions&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ATTRIBUTES", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ATTRIBUTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;attributes&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ATTRIBUTE_STIX_TYPE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ATTRIBUTE_STIX_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;stix_value_type&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ATTRIBUTE_TYPEDB_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ATTRIBUTE_TYPEDB_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;typedb_name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ATTRIBUTE_TYPEDB_VALUE_TYPE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ATTRIBUTE_TYPEDB_VALUE_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;typedb_value_type&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_COMPOSITE_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_COMPOSITE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;typedb-name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_COMPOSITE_RELATION", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_COMPOSITE_RELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;helper-relation&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_COMPOSITE_RELATION_OBJECT_ROLE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_COMPOSITE_RELATION_OBJECT_ROLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;object-role&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_COMPOSITE_RELATION_VALUE_ROLE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_COMPOSITE_RELATION_VALUE_ROLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;value-role&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DEFAULT_KEY", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DEFAULT_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;_&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_TYPE_SEPARATOR", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_TYPE_SEPARATOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;:&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ROLE_SEPARATION", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ROLE_SEPARATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;::&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.RELATION_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "RELATION_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation-name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.RELATION_OBJECT_TYPE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "RELATION_OBJECT_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;entity-type&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.RELATION_ROLE_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "RELATION_ROLE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;role-name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIRS_VALUE_TYPE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIRS_VALUE_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;value_type&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIRS_KEYS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIRS_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;keys&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIRS_RELATION", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIRS_RELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIRS_ATTRIBUTE_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIRS_ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;attribute_name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIR_CUSTOM", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIR_CUSTOM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;custom&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_KEY_VALUE_PAIR_KEYWORD", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_KEY_VALUE_PAIR_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;key-value&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIR_CUSTOM_ENTITY", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIR_CUSTOM_ENTITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;entity-name&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_PAIR_CUSTOM_ATTRIBUTE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_PAIR_CUSTOM_ATTRIBUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;name-attribute&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ROLE_ITEM", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ROLE_ITEM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;item-role&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_ROLE_OBJECT", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_ROLE_OBJECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;object-role&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_RELATION", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_RELATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_KEY", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;attribute_key&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_SUBITEMS", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_SUBITEMS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;subitems&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_ATTRIBUTE_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;attribute_property&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_ITEM_ENTITY", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_ITEM_ENTITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;entity&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.MAPPING_DICTIONARY_VALUE_ATTRIBUTE", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "MAPPING_DICTIONARY_VALUE_ATTRIBUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;value-attribute&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_LIST_PREFIX", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_LIST_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;list&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_COMPOSITE_PREFIX", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_COMPOSITE_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;composite&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_RELATION_PREFIX", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_RELATION_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;relation&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_NOT_IMPLEMENTED_TYPE_KEYWORD", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_NOT_IMPLEMENTED_TYPE_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;empty&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_DICTIONARY_KEYWORD", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_DICTIONARY_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;dictionary&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.TYPEQL_ROLEPLAYER", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "TYPEQL_ROLEPLAYER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;roleplayer&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.REFERENCE_KEYWORD", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "REFERENCE_KEYWORD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;reference&#x27;"}, {"fullname": "satrap.etl.transform.stix_typeql_constants.ATTRIBUTE_NAME", "modulename": "satrap.etl.transform.stix_typeql_constants", "qualname": "ATTRIBUTE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;name&#x27;"}, {"fullname": "satrap.etl.transform.stixobject_converter", "modulename": "satrap.etl.transform.stixobject_converter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter", "kind": "class", "doc": "<p>Converts a STIX Object.</p>\n", "bases": "abc.ABC"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.__init__", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.__init__", "kind": "function", "doc": "<p>Initialize.</p>\n\n<p>Set the id, type, properties and extensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>properties</strong>:  The properties of the STIX Object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If 'id' or 'type' property is missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create", "kind": "function", "doc": "<p>Creates the corresponding subclass according \nto the properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>properties</strong>:  The properties of the STIX Object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the 'id' or 'type' property is \nmissing</li>\n<li><strong>MappingException</strong>:  If the STIX object class is not \ndefined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The STIX Object (as a subclass instance)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.stix_type", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.stix_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.stix_id", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.stix_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.extensions", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.extensions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.properties", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.properties", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.build_typeql_bundle", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.build_typeql_bundle", "kind": "function", "doc": "<p>Build the elements in each of the TypeQL statements for inserting this\nobject into the TypeDB database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The elements to build the insert queries of the object.\n  None if an error occurs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_properties", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_properties", "kind": "function", "doc": "<p>Returns a dictionary of all TypeDB attributes in \n{name:value} format and all additional queries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>reference</strong>:  Reference values that identify the main \nobject.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>TypeQL attributes and additional queries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_extension", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_extension", "kind": "function", "doc": "<p>Transforms an extension to TypeDB.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ref</strong>:  A reference to the main object</li>\n<li><strong>extension</strong>:  The name of the extension</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The attributes and additional insert queries required\n      to insert this extension</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span>,</span><span class=\"param\">\t<span class=\"n\">extension</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_extensions", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_extensions", "kind": "function", "doc": "<p>Transform the extensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ref</strong>:  A reference to the main object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The attributes and additional insert queries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.get_relevant_extension", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.get_relevant_extension", "kind": "function", "doc": "<p>Determine which extension to choose for converting.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the relevant extension</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_extension_properties", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_extension_properties", "kind": "function", "doc": "<p>Build a single extension.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extension_name</strong>:  The name of the extension</li>\n<li><strong>extension_object</strong>:  The extension data</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>TypeQL attributes and additional queries\n  :rytpe: tuple[dict, QueryBundle]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">extension_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">extension_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_extension_property", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_extension_property", "kind": "function", "doc": "<p>Build a single property of an extension. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extension_name</strong>:  The name of the extension</li>\n<li><strong>property_name</strong>:  The name of the property</li>\n<li><strong>property_value</strong>:  The value of the property</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name, values and additional queries for this \n      property</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">extension_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">property_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">property_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">ref</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_property", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_property", "kind": "function", "doc": "<p>Build a single TypeDB property.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_name</strong>:  The STIX name of the attribute.</li>\n<li><strong>stix_value</strong>:  The STIX value that belongs to the attribute</li>\n<li><strong>reference</strong>:  Reference values that identify the main object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name, values and additional insert queries for this \n      attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stix_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stix_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.create_typeql_custom_property", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.create_typeql_custom_property", "kind": "function", "doc": "<p>Build a custom TypeDB property.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_name</strong>:  The STIX name of the attribute.</li>\n<li><strong>stix_value</strong>:  The STIX value that belongs to the attribute</li>\n<li><strong>reference</strong>:  Reference values that identify the main object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name, values and additional insert queries for this \n      attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stix_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stix_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.add_attributes_to_typedb_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.add_attributes_to_typedb_object", "kind": "function", "doc": "<p>Helper method to add attributes to the thing that represents \nthe main object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>attributes</strong>:  The attributes to be added</li>\n<li><strong>main_object</strong>:  The thing that represents the main object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">main_object</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.determine_typedb_name", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.determine_typedb_name", "kind": "function", "doc": "<p>Returns the name of the type in the schema of this STIX \nobject. None if the type could not be determined.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The typedb type of this object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>MappingException</strong>:  If an error occurs while retrieving\nthe TypeDB type corresponding to a STIX type</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.get_stix_id", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.get_stix_id", "kind": "function", "doc": "<p>Returns the stix-id of this STIX Object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The id of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.get_stix_type", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.get_stix_type", "kind": "function", "doc": "<p>Returns the stix type of this STIX Object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The stix type of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXObjectConverter.convert_value_to_typeql", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXObjectConverter.convert_value_to_typeql", "kind": "function", "doc": "<p>Convert a value. Returns None if an error occured.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value_type</strong>:  The type the value should have in TypeDB</li>\n<li><strong>stix_value</strong>:  The stix value that should be converted</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be converted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The values and additional insert queries</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">stix_value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCustomObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCustomObjectConverter", "kind": "class", "doc": "<p>Represents a Custom STIX Object.</p>\n", "bases": "STIXObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCustomObjectConverter.build_typeql_bundle", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCustomObjectConverter.build_typeql_bundle", "kind": "function", "doc": "<p>Build the elements in each of the TypeQL statements for inserting this\nobject into the TypeDB database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The elements to build the insert queries of the object.\n  None if an error occurs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCoreObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCoreObjectConverter", "kind": "class", "doc": "<p>Represents STIX Core objects.</p>\n", "bases": "STIXObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCoreObjectConverter.create_typeql_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCoreObjectConverter.create_typeql_object", "kind": "function", "doc": "<p>Create the entity or relation that represents the main object \nand add it to the builder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type_name</strong>:  The TypeDB type of the main object</li>\n<li><strong>queries</strong>:  The QueryBundle to which the created object will\nbe added</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the STIX Object does not have \nrequired properties</li>\n<li><strong>MappingException</strong>:  If the mapping is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The thing that represents the main STIX Object and \n      a reference to it </p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queries</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Thing</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCoreObjectConverter.build_typeql_bundle", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCoreObjectConverter.build_typeql_bundle", "kind": "function", "doc": "<p>Build the elements in each of the TypeQL statements for inserting this\nobject into the TypeDB database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The elements to build the insert queries of the object.\n  None if an error occurs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXDomainObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXDomainObjectConverter", "kind": "class", "doc": "<p>Converts STIX Domain Objects.</p>\n", "bases": "STIXCoreObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXDomainObjectConverter.create_typeql_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXDomainObjectConverter.create_typeql_object", "kind": "function", "doc": "<p>Create the entity or relation that represents the main object \nand add it to the builder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type_name</strong>:  The TypeDB type of the main object</li>\n<li><strong>queries</strong>:  The QueryBundle to which the created object will\nbe added</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the STIX Object does not have \nrequired properties</li>\n<li><strong>MappingException</strong>:  If the mapping is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The thing that represents the main STIX Object and \n      a reference to it </p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">type_name</span>, </span><span class=\"param\"><span class=\"n\">queries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCyberObservableConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCyberObservableConverter", "kind": "class", "doc": "<p>Converts STIX Cyber Observables.</p>\n", "bases": "STIXCoreObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXCyberObservableConverter.create_typeql_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXCyberObservableConverter.create_typeql_object", "kind": "function", "doc": "<p>Create the entity or relation that represents the main object \nand add it to the builder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type_name</strong>:  The TypeDB type of the main object</li>\n<li><strong>queries</strong>:  The QueryBundle to which the created object will\nbe added</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the STIX Object does not have \nrequired properties</li>\n<li><strong>MappingException</strong>:  If the mapping is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The thing that represents the main STIX Object and \n      a reference to it </p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">type_name</span>, </span><span class=\"param\"><span class=\"n\">queries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXRelationshipObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXRelationshipObjectConverter", "kind": "class", "doc": "<p>Converts STIX Relationship objects.</p>\n", "bases": "STIXCoreObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXRelationshipObjectConverter.create_role", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXRelationshipObjectConverter.create_role", "kind": "function", "doc": "<p>Create a single role for this relation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>role_name</strong>:  The name of the role</li>\n<li><strong>roleplayer_id</strong>:  The id of the roleplayer</li>\n<li><strong>relation</strong>:  The main object relation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The roleplayer's match object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">role_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">roleplayer_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Entity</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXRelationshipObjectConverter.create_role_property", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXRelationshipObjectConverter.create_role_property", "kind": "function", "doc": "<p>Creates a role property of the main relation, i.e. creates \nthe match objects and returns them.</p>\n\n<p>Note: Because a property's value type might be a list of \n    identifiers, we have to return a list of match objects</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type_name</strong>:  The TypeDB type for this object</li>\n<li><strong>property_name</strong>:  The name of the property that is \nimplemented as a role player</li>\n<li><strong>relation</strong>:  The main relation object</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the property does not exist</li>\n<li><strong>MappingException</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The match objects for the created roleplayers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">type_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">property_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">relation</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Relation</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">Entity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXRelationshipObjectConverter.create_typeql_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXRelationshipObjectConverter.create_typeql_object", "kind": "function", "doc": "<p>Create the entity or relation that represents the main object \nand add it to the builder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>type_name</strong>:  The TypeDB type of the main object</li>\n<li><strong>queries</strong>:  The QueryBundle to which the created object will\nbe added</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TransformationError</strong>:  If the STIX Object does not have \nrequired properties</li>\n<li><strong>MappingException</strong>:  If the mapping is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The thing that represents the main STIX Object and \n      a reference to it </p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">type_name</span>, </span><span class=\"param\"><span class=\"n\">queries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXMetaObjectConverter", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXMetaObjectConverter", "kind": "class", "doc": "<p>Converts STIX Meta Objects.</p>\n", "bases": "STIXObjectConverter"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXMetaObjectConverter.create_typeql_object", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXMetaObjectConverter.create_typeql_object", "kind": "function", "doc": "<p>Creates a TypeQL entity object and an identification reference.</p>\n\n<p>Args:\n    type_name (str): The name of the TypeQL type to create.\n    queries (Queries): The queries object to which the main entity will be added.</p>\n\n<p>Returns:\n    tuple: A tuple containing the created Entity object and the Identification reference.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">type_name</span>, </span><span class=\"param\"><span class=\"n\">queries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.stixobject_converter.STIXMetaObjectConverter.build_typeql_bundle", "modulename": "satrap.etl.transform.stixobject_converter", "qualname": "STIXMetaObjectConverter.build_typeql_bundle", "kind": "function", "doc": "<p>Build the elements in each of the TypeQL statements for inserting this\nobject into the TypeDB database.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The elements to build the insert queries of the object.\n  None if an error occurs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.transformer", "modulename": "satrap.etl.transform.transformer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.transformer.Transformer", "modulename": "satrap.etl.transform.transformer", "qualname": "Transformer", "kind": "class", "doc": "<p>A transformer.</p>\n\n<p>Handles transformation of objects from one data format to another.</p>\n", "bases": "abc.ABC"}, {"fullname": "satrap.etl.transform.transformer.Transformer.transform", "modulename": "satrap.etl.transform.transformer", "qualname": "Transformer.transform", "kind": "function", "doc": "<p>Transforms an object from one data format to another.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>object</strong>:  The object that will be transformed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">src_object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.transformer.STIXtoTypeQLTransformer", "modulename": "satrap.etl.transform.transformer", "qualname": "STIXtoTypeQLTransformer", "kind": "class", "doc": "<p>A STIX2.1 to TypeQL Transformer.</p>\n\n<p>Transforms a STIX2.1 object represented in JSON format into \nits TypeQL representation as per the schema of the SATRAP CTI SKB.</p>\n", "bases": "Transformer"}, {"fullname": "satrap.etl.transform.transformer.STIXtoTypeQLTransformer.transform", "modulename": "satrap.etl.transform.transformer", "qualname": "STIXtoTypeQLTransformer.transform", "kind": "function", "doc": "<p>Generates a triplet of insert queries in TypeQL \nfor inserting a STIX2.1 object in JSON format into \na TypeDB database that follows the SATRAP CTI SKB schema</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>object</strong>:  The JSON object that will be transformed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The TypeQL queries for inserting the STIX2.1 object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">src_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">,</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">datamanagement</span><span class=\"o\">.</span><span class=\"n\">typedb</span><span class=\"o\">.</span><span class=\"n\">dataobjects</span><span class=\"o\">.</span><span class=\"n\">InsertQuery</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter", "modulename": "satrap.etl.transform.valueconverter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverter", "kind": "class", "doc": "<p>Converts a value from one data representation to another.</p>\n", "bases": "abc.ABC"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverter.get_converter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverter.get_converter", "kind": "function", "doc": "<p>Returns an instance of a ValueConverter for the given type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value_type</strong>:  The string that specifies the type of the \nconverter, e.g. \"string\" or \"long\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value type has no converter \nimplementation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An instance of the corresponding ValueConverter</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverterAdapter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverterAdapter", "kind": "class", "doc": "<p>Adapter class for the ValueConverters.</p>\n\n<p>This class is responsible for giving all ValueConverters the same \nreturn type for their convert_value function.</p>\n", "bases": "ValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverterAdapter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverterAdapter.__init__", "kind": "function", "doc": "<p>Initializes a Converter Adapter</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>converter</strong>:  The underlying converter</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">converter</span><span class=\"p\">:</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">valueconverter</span><span class=\"o\">.</span><span class=\"n\">ValueConverter</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverterAdapter.converter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverterAdapter.converter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverterAdapter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverterAdapter.parse_stix_2_1", "kind": "function", "doc": "<p>Parses a STIX 2.1 value. Delegates this task to the \nunderlying converter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value that will be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ValueConverterAdapter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ValueConverterAdapter.convert_to_typeql", "kind": "function", "doc": "<p>Converts a value to the TypeDB representation.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If there is a type error concerning \nthe return types.</li>\n<li><strong>MappingError</strong>:  If the underlying mapping from STIX to \nthe TypeDB schema is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The values and additional queries required to build \n      this value in TypeDB</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">QueryBundle</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.PrimitiveValueConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "PrimitiveValueConverter", "kind": "class", "doc": "<p>Converts a value of a primitive data format to another.</p>\n", "bases": "ValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.EmptyValueConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmptyValueConverter", "kind": "class", "doc": "<p>Converts a value to an empty/ non-existing value.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.EmptyValueConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmptyValueConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.EmptyValueConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmptyValueConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.BooleanConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "BooleanConverter", "kind": "class", "doc": "<p>Converts a <em>Boolean</em> value from one representation to another.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.BooleanConverter.boolean", "modulename": "satrap.etl.transform.valueconverter", "qualname": "BooleanConverter.boolean", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.BooleanConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "BooleanConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.BooleanConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "BooleanConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.LongConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "LongConverter", "kind": "class", "doc": "<p>Converts a <em>Long</em> value from one representation to another.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.LongConverter.number", "modulename": "satrap.etl.transform.valueconverter", "qualname": "LongConverter.number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.LongConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "LongConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.LongConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "LongConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DoubleConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DoubleConverter", "kind": "class", "doc": "<p>Converts a <em>Double</em> value from one representation to another.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.DoubleConverter.number", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DoubleConverter.number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.DoubleConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DoubleConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DoubleConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DoubleConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.StringConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "StringConverter", "kind": "class", "doc": "<p>Converts a <em>String</em> value from one representation to another.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.StringConverter.text", "modulename": "satrap.etl.transform.valueconverter", "qualname": "StringConverter.text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.StringConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "StringConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.StringConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "StringConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter", "kind": "class", "doc": "<p>Converts a <em>Datetime</em> value from one representation to another.</p>\n", "bases": "PrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.year", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.year", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.month", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.month", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.day", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.day", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.hour", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.hour", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.minute", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.minute", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.seconds", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.subseconds", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.subseconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[int]"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DatetimeConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DatetimeConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.NonPrimitiveValueConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "NonPrimitiveValueConverter", "kind": "class", "doc": "<p>Converts a complex value from one representation to another.</p>\n", "bases": "ValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.NonPrimitiveValueConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "NonPrimitiveValueConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.NonPrimitiveValueConverter.typedb_subtype", "modulename": "satrap.etl.transform.valueconverter", "qualname": "NonPrimitiveValueConverter.typedb_subtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.KeyValuePairConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "KeyValuePairConverter", "kind": "class", "doc": "<p>Converts predefined KeyValuePairs from one representation \nto another.</p>\n", "bases": "NonPrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.KeyValuePairConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "KeyValuePairConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.KeyValuePairConverter.key_value_pairs", "modulename": "satrap.etl.transform.valueconverter", "qualname": "KeyValuePairConverter.key_value_pairs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "satrap.etl.transform.valueconverter.KeyValuePairConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "KeyValuePairConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.KeyValuePairConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "KeyValuePairConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.CompositeValueConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "CompositeValueConverter", "kind": "class", "doc": "<p>Converts a composite value from one representation to another.</p>\n", "bases": "NonPrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.CompositeValueConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "CompositeValueConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.CompositeValueConverter.attributes", "modulename": "satrap.etl.transform.valueconverter", "qualname": "CompositeValueConverter.attributes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.CompositeValueConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "CompositeValueConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.CompositeValueConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "CompositeValueConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.EmbeddedRelationConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmbeddedRelationConverter", "kind": "class", "doc": "<p>Converts a relation from one representation to another.</p>\n", "bases": "NonPrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.EmbeddedRelationConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmbeddedRelationConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.EmbeddedRelationConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmbeddedRelationConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.EmbeddedRelationConverter.get_id_and_roles", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmbeddedRelationConverter.get_id_and_roles", "kind": "function", "doc": "<p>Extracts the id of the calling object and the name of the \nobject's and value's roles.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If a required parameter is not given</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The id of the object and roles of the object and value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">satrap</span><span class=\"o\">.</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">Identification</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.EmbeddedRelationConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "EmbeddedRelationConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ListConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ListConverter", "kind": "class", "doc": "<p>Converts a typed list from one representation to another.</p>\n", "bases": "NonPrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.ListConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ListConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subtype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "satrap.etl.transform.valueconverter.ListConverter.elements", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ListConverter.elements", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.etl.transform.valueconverter.ListConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ListConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.ListConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "ListConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DictionaryConverter", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DictionaryConverter", "kind": "class", "doc": "<p>Convertes a Dictionary from one representation to another.</p>\n", "bases": "NonPrimitiveValueConverter"}, {"fullname": "satrap.etl.transform.valueconverter.DictionaryConverter.__init__", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DictionaryConverter.__init__", "kind": "function", "doc": "<p>Initializes a NonPrimitiveValueConverter and sets the \nsubtype of this NonPrimitive data type.</p>\n\n<p>E.g. for a list of strings, string is the subtype.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtype</strong>:  The name of the subtype</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "satrap.etl.transform.valueconverter.DictionaryConverter.dictionary", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DictionaryConverter.dictionary", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "satrap.etl.transform.valueconverter.DictionaryConverter.parse_stix_2_1", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DictionaryConverter.parse_stix_2_1", "kind": "function", "doc": "<p>Parse a STIX2.1 value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  The value in STIX 2.1 format</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the value could not be parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.etl.transform.valueconverter.DictionaryConverter.convert_to_typeql", "modulename": "satrap.etl.transform.valueconverter", "qualname": "DictionaryConverter.convert_to_typeql", "kind": "function", "doc": "<p>Create every query or query part that is required to add\nthis value to the TypeDB database.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the underlying value could not be \nconverted</li>\n<li><strong>MappingException</strong>:  If the mapping for the value\ntransformation process is invalid</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The transformed value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend", "modulename": "satrap.frontend", "kind": "module", "doc": "<p>SATRAP CTI frontend package</p>\n"}, {"fullname": "satrap.frontend.CLI", "modulename": "satrap.frontend", "qualname": "CLI", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SATRAP&#x27;"}, {"fullname": "satrap.frontend.VERSION", "modulename": "satrap.frontend", "qualname": "VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;satrap/frontend v0.1&#x27;"}, {"fullname": "satrap.frontend.DESCRIPTION", "modulename": "satrap.frontend", "qualname": "DESCRIPTION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;SATRAP. Cyber threat Intelligence powered by automated reasoning.&#x27;"}, {"fullname": "satrap.frontend.commands", "modulename": "satrap.frontend.commands", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.frontend.commands.as_function", "modulename": "satrap.frontend.commands", "qualname": "as_function", "kind": "function", "doc": "<p>Retrieve a function from the current global namespace.\nThe function name is of the form: exec_<name></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  the name of the triggering command</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a callable function</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If a function associated with the given name\nis not found in the global namespace</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_setup", "modulename": "satrap.frontend.commands", "qualname": "exec_setup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_etl", "modulename": "satrap.frontend.commands", "qualname": "exec_etl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_tl", "modulename": "satrap.frontend.commands", "qualname": "exec_tl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_rules", "modulename": "satrap.frontend.commands", "qualname": "exec_rules", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_stats", "modulename": "satrap.frontend.commands", "qualname": "exec_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_techniques", "modulename": "satrap.frontend.commands", "qualname": "exec_techniques", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_mitigations", "modulename": "satrap.frontend.commands", "qualname": "exec_mitigations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_search", "modulename": "satrap.frontend.commands", "qualname": "exec_search", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.commands.exec_info_mitre", "modulename": "satrap.frontend.commands", "qualname": "exec_info_mitre", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.frontend.satrap_cli", "modulename": "satrap.frontend.satrap_cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "satrap.frontend.satrap_cli.cli", "modulename": "satrap.frontend.satrap_cli", "qualname": "cli", "kind": "function", "doc": "<p>Command line management interface that allows setting up a fresh CTI SKB\n, running the ETL process and SATRAP analysis tools.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.service", "modulename": "satrap.service", "kind": "module", "doc": "<p>SATRAP CTI analysis package</p>\n"}, {"fullname": "satrap.service.satrap_analysis", "modulename": "satrap.service.satrap_analysis", "kind": "module", "doc": "<p>This module provides a toolbox for performing various Cyber Threat Intelligence (CTI) analysis tasks.</p>\n"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox", "kind": "class", "doc": "<p>A class that provides various automated CTI analysis tasks leveraging the \nreasoning capabilities of the <code>CTIEngine</code>.</p>\n"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.__init__", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.__init__", "kind": "function", "doc": "<p>Initialize the CTIanalysisToolbox with the given server and database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  The address of the TypeDB server.</li>\n<li><strong>database</strong>:  The name of the TypeDB database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">database</span></span>)</span>"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.cti_engine", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.cti_engine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.explain_if_related_mitigation", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.explain_if_related_mitigation", "kind": "function", "doc": "<p>Obtain an explanation on whether a given mitigation is potentially relevant (is related)\nfor addressing the techniques used by a group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_mitre_id</strong>:  The MITRE ATT&amp;CK ID of the group.</li>\n<li><strong>mitigation_stix_id</strong>:  The STIX ID of the mitigation.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If the given MITRE ATT&amp;CK ID is invalid or no group with\nsuch an ID is found.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An InferredAnswer containing explanations for the relation between the mitigation\n   and the group. If no relation is inferred, the explanations list is empty.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_mitre_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">mitigation_stix_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.explain_related_techniques", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.explain_related_techniques", "kind": "function", "doc": "<p>Obtain relevant courses of action for a given intrusion set, when considering the\nmitigation of a specific SDO (usually technique).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">technique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.explain_techniques_used_by_group", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.explain_techniques_used_by_group", "kind": "function", "doc": "<p>Provides explanations on the inference rules that are applied to derive\nthe set of techniques used by a specific group. The result can be optionally\nfiltered by the name of a specific technique.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_id</strong>:  The MITRE ATT&amp;CK identifier of the group for which to explain techniques.</li>\n<li><strong>technique_name</strong>:  The name of a specific technique to explain (optional).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An InferredAnswer object containing the explanation of the techniques\n      (or the selected technique) used by the group.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">technique_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.get_attck_concept_info", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.get_attck_concept_info", "kind": "function", "doc": "<p>Get information on the STIX objects associated to a MITRE ATT&amp;CK ID.\nOnly STIX objects of the type corresponding to the format of the\ngiven ID (as per the ATT&amp;CK-stix2.1 specification) are retrieved.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mitre_id</strong>:  The MITRE ATT&amp;CK ID.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Information about the ATT&amp;CK concept.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If no information is found for the given MITRE ID.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mitre_id</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.get_sdo_stats", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.get_sdo_stats", "kind": "function", "doc": "<p>Get the number of STIX Domain Objects (SDOs) in the database per type.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Information about SDOs in the knowledge base.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.mitigations_for_technique", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.mitigations_for_technique", "kind": "function", "doc": "<p>Retrieve mitigations associated to a specific technique.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_id</strong>:  The STIX ID of the technique.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pairs (STIX id:name) representing the mitigations of the technique</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stix_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.mitre_attack_mitigations", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.mitre_attack_mitigations", "kind": "function", "doc": "<p>Get all mitigations from the MITRE ATT&amp;CK framework (M####).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>All the mitigations defined in MITRE ATT&amp;CK.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.mitre_attack_techniques", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.mitre_attack_techniques", "kind": "function", "doc": "<p>Get all techniques from the MITRE ATT&amp;CK framework (T####) and\noptionally include subtechniques (T####.###).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>subtechniques</strong>:  Whether to include subtechniques. Default is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>All the techniques defined in MITRE ATT&amp;CK.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subtechniques</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.related_mitigations", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.related_mitigations", "kind": "function", "doc": "<p>Obtain the set of courses of action found to mitigate any of the techniques used by a specific group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_id</strong>:  The MITRE ATT&amp;CK id of the group</li>\n<li><strong>group_name</strong>:  The name of the group</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If none of the optional values is provided</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">group_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.search_stix_object", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.search_stix_object", "kind": "function", "doc": "<p>Search for a STIX object by its ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_id</strong>:  The STIX ID of the object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The STIX object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  If no information is found for the given STIX ID.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stix_id</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.techniques_usage", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.techniques_usage", "kind": "function", "doc": "<p>Get the number of groups that use each ATT&amp;CK technique.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sort_order: Sort order of the results</strong>:  \"asc\" for ascending\nor \"desc\" for descending (default).</li>\n<li><strong>used_by_min</strong>:  Minimum usage count to filter the results. Default is None.</li>\n<li><strong>used_by_max</strong>:  Maximum usage count to filter the results. Default is None.</li>\n<li><strong>infer</strong>:  Whether to activate the inference engine. Default is False.</li>\n<li><strong>norevoked</strong>:  True (default) to consider only techniques that have not been revoked.\nFalse otherwise.</li>\n<li><strong>limit</strong>:  Maximum number of results to return. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of tuples containing the technique ID, name, and usage count.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sort_order</span><span class=\"o\">=</span><span class=\"s1\">&#39;desc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">used_by_min</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">used_by_max</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">norevoked</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.techniques_used_by_group", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.techniques_used_by_group", "kind": "function", "doc": "<p>Get the techniques used by a specific group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_id</strong>:  The ID of the group.</li>\n<li><strong>infer</strong>:  Whether to activate the inference engine. Default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Techniques used by the group.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_id</span>, </span><span class=\"param\"><span class=\"n\">infer</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.tabulate_stix_obj", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.tabulate_stix_obj", "kind": "function", "doc": "<p>Convert a dictionary to a table using the tabulate library.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stix_object</strong>:  The dictionary to be converted.</li>\n<li><strong>headers</strong>:  The headers of the table. Default is [\"Property\", \"Value\"].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tabular representation of the dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stix_object</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.service.satrap_analysis.CTIanalysisToolbox.format_dict", "modulename": "satrap.service.satrap_analysis", "qualname": "CTIanalysisToolbox.format_dict", "kind": "function", "doc": "<p>Formats a dictionary into a string with indentation for nested dictionaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dictionary</strong>:  The dictionary to format.</li>\n<li><strong>indent</strong>:  The number of spaces to use for indentation. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The formatted string representation of the dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.settings", "modulename": "satrap.settings", "kind": "module", "doc": "<p>SATRAP's configuration parameters</p>\n"}, {"fullname": "satrap.settings.read_yaml", "modulename": "satrap.settings", "qualname": "read_yaml", "kind": "function", "doc": "<p>Reads the content of a YAML file and returns it as a dictionary</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  the path to the YAML file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "satrap.settings.ROOT_DIR", "modulename": "satrap.settings", "qualname": "ROOT_DIR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap&#x27;"}, {"fullname": "satrap.settings.ASSETS_FOLDER", "modulename": "satrap.settings", "qualname": "ASSETS_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;assets&#x27;"}, {"fullname": "satrap.settings.DB_SCHEMA_FOLDER", "modulename": "satrap.settings", "qualname": "DB_SCHEMA_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;schema&#x27;"}, {"fullname": "satrap.settings.LOGS_PATH", "modulename": "satrap.settings", "qualname": "LOGS_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/logs&#x27;"}, {"fullname": "satrap.settings.MAPPING_FILES_PATH", "modulename": "satrap.settings", "qualname": "MAPPING_FILES_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/etl/transform/mapping&#x27;"}, {"fullname": "satrap.settings.TESTS_SAMPLES_PATH", "modulename": "satrap.settings", "qualname": "TESTS_SAMPLES_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/tests/data&#x27;"}, {"fullname": "satrap.settings.SATRAP_PARAMS_FILE_NAME", "modulename": "satrap.settings", "qualname": "SATRAP_PARAMS_FILE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;satrap_params.yml&#x27;"}, {"fullname": "satrap.settings.SATRAP_PARAMS_FILE_PATH", "modulename": "satrap.settings", "qualname": "SATRAP_PARAMS_FILE_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/satrap_params.yml&#x27;"}, {"fullname": "satrap.settings.satrap_params_dict", "modulename": "satrap.settings", "qualname": "satrap_params_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;typedb&#x27;: {&#x27;host&#x27;: &#x27;typedb&#x27;, &#x27;port&#x27;: &#x27;1729&#x27;, &#x27;db_name&#x27;: &#x27;satrap-skb-alpha&#x27;}, &#x27;log&#x27;: {&#x27;env&#x27;: &#x27;prod&#x27;}, &#x27;etl&#x27;: None, &#x27;tl&#x27;: None}"}, {"fullname": "satrap.settings.TRANSFORM_SRC_TST", "modulename": "satrap.settings", "qualname": "TRANSFORM_SRC_TST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/tests/data/test-sample.json&#x27;"}, {"fullname": "satrap.settings.TYPEDB_SERVER_ADDRESS", "modulename": "satrap.settings", "qualname": "TYPEDB_SERVER_ADDRESS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;typedb:1729&#x27;"}, {"fullname": "satrap.settings.DB_SCHEMA", "modulename": "satrap.settings", "qualname": "DB_SCHEMA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/schema/cti-skb-types.tql&#x27;"}, {"fullname": "satrap.settings.DB_RULES", "modulename": "satrap.settings", "qualname": "DB_RULES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/schema/cti-skb-rules.tql&#x27;"}, {"fullname": "satrap.settings.DB_NAME_TST", "modulename": "satrap.settings", "qualname": "DB_NAME_TST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;satrap-test&#x27;"}, {"fullname": "satrap.settings.MITRE_ATTACK_GIT", "modulename": "satrap.settings", "qualname": "MITRE_ATTACK_GIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/mitre-attack/attack-stix-data/master/&#x27;"}, {"fullname": "satrap.settings.MITRE_ATTACK_ENTERPRISE", "modulename": "satrap.settings", "qualname": "MITRE_ATTACK_ENTERPRISE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/mitre-attack/attack-stix-data/master/enterprise-attack/enterprise-attack.json&#x27;"}, {"fullname": "satrap.settings.MITRE_ATTACK_MOBILE", "modulename": "satrap.settings", "qualname": "MITRE_ATTACK_MOBILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/mitre-attack/attack-stix-data/master/mobile-attack/mobile-attack.json&#x27;"}, {"fullname": "satrap.settings.MITRE_ATTACK_ICS", "modulename": "satrap.settings", "qualname": "MITRE_ATTACK_ICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/mitre-attack/attack-stix-data/master/ics-attack/ics-attack.json&#x27;"}, {"fullname": "satrap.settings.DOWNLOAD_CHUNK_SIZE", "modulename": "satrap.settings", "qualname": "DOWNLOAD_CHUNK_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "4096"}, {"fullname": "satrap.settings.STIX_DATA_PATH", "modulename": "satrap.settings", "qualname": "STIX_DATA_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/stixdata&#x27;"}, {"fullname": "satrap.settings.MISP_STIX_DATA_FILE", "modulename": "satrap.settings", "qualname": "MISP_STIX_DATA_FILE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/workspaces/cti-analysis-platform/satrap/assets/stixdata/misp_events.json&#x27;"}, {"fullname": "satrap.settings.LOAD_BATCH_SIZE", "modulename": "satrap.settings", "qualname": "LOAD_BATCH_SIZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "100"}, {"fullname": "satrap.settings.EXTRACT_URL_TST", "modulename": "satrap.settings", "qualname": "EXTRACT_URL_TST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/refs/heads/master/examples/indicator-to-campaign-relationship.json&#x27;"}, {"fullname": "satrap.settings.DEBUG_LOG_FILE_NAME", "modulename": "satrap.settings", "qualname": "DEBUG_LOG_FILE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;debug&#x27;"}, {"fullname": "satrap.settings.INFO_LOG_FILE_NAME", "modulename": "satrap.settings", "qualname": "INFO_LOG_FILE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;info&#x27;"}, {"fullname": "satrap.settings.ERROR_LOG_FILE_NAME", "modulename": "satrap.settings", "qualname": "ERROR_LOG_FILE_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;error&#x27;"}, {"fullname": "satrap.settings.LOG_FILES_EXT", "modulename": "satrap.settings", "qualname": "LOG_FILES_EXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.log&#x27;"}, {"fullname": "satrap.settings.TIMESTAMP_FILES", "modulename": "satrap.settings", "qualname": "TIMESTAMP_FILES", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();